---
subtitle: "Plot Design in {ggplot2}"
title: "Week 10 - STEM 691"
author: "Dr. Kelly Boles & Dr. Zhen Xu"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: slides_images/UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r, echo=F}
library(tidyverse)
library(MetBrewer)
library(tidykids)
```

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.smaller-font}
- **Weekly Check In**
- **Last Week:** {ggrepel}
- **Plot Composition & Design**
    - Compound Plots
        - {patchwork}
        - {cowplot}
        - {gridExtra}
    - Faceting
    - Annotations (non-text)
- **Collaborative Discussion**
    - Mini Project #2 & Final Project
    - Collaborative Rubric for Final Project
- **Looking Ahead**
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Building on Week 9

## Homework 9: {showtext} font sizing {.smaller}
<hr>
- Some of you experienced {showtext} font sizing issues
- This is a known issue with {showtext} and {ggplot2}
- Largely happens on Windows machines
- If this happened in your homework, I will provide a piece of code in your Canvas feedback to help

## One More Pkg {ggrepel}{.smaller}
<hr>

:::{.extra-small-font}
- {ggrepel} helps with overlapping text labels
- `geom_text_repel()` and `geom_label_repel()`
- equivalent to `geom_text()` and `geom_label()` but with repelling

:::

```{r, echo=F}
library(tidykids)
tidykids_wider <- tidykids|>
  filter(year == 2016) |>
  pivot_wider(names_from = expenditure, values_from = c(raw, inf_adj, inf_adj_perchild))
```

:::{layout="[1,1]" .smaller-font}
:::column
```{r}
tidykids_wider |>
  ggplot(aes(x = inf_adj_edsubs, y = inf_adj_parkrec)) +
  geom_point() +
  geom_text(aes(label = state))
```
:::

:::column
```{r}
library(ggrepel)

tidykids_wider |>
  ggplot(aes(x = inf_adj_edsubs, y = inf_adj_parkrec)) +
  geom_point() +
  geom_text_repel(aes(label = state))
```
:::
:::

## One More Pkg {ggrepel}{.smaller}
<hr>

:::{.extra-small-font}
- {ggrepel} helps with overlapping text labels
- `geom_text_repel()` and `geom_label_repel()`
- equivalent to `geom_text()` and `geom_label()` but with repelling

:::

```{r, echo=F}
library(tidykids)
tidykids_wider <- tidykids|>
  filter(year == 2016) |>
  pivot_wider(names_from = expenditure, values_from = c(raw, inf_adj, inf_adj_perchild))
```

:::{layout="[1,1]" .smaller-font}
:::column
```{r}
tidykids_wider |>
  filter(state != "California") |>
  ggplot(aes(x = inf_adj_edsubs, y = inf_adj_parkrec)) +
  geom_point() +
  geom_text(aes(label = state))
```
:::

:::column
```{r}
library(ggrepel)

tidykids_wider |>
  filter(state != "California") |>
  ggplot(aes(x = inf_adj_edsubs, y = inf_adj_parkrec)) +
  geom_point() +
  geom_text_repel(aes(label = state))
```
:::
:::

## One More Pkg {ggrepel}{.smaller}
<hr>

:::{.extra-small-font}
- {ggrepel} helps with overlapping text labels
- `geom_text_repel()` and `geom_label_repel()`
- equivalent to `geom_text()` and `geom_label()` but with repelling

:::

```{r, echo=F}
library(tidykids)
tidykids_wider <- tidykids|>
  filter(year == 2016) |>
  pivot_wider(names_from = expenditure, values_from = c(raw, inf_adj, inf_adj_perchild))
```

:::{layout="[1,1]" .smaller-font}
:::column
```{r}
tidykids_wider |>
  filter(state != "California") |>
  ggplot(aes(x = inf_adj_edsubs, y = inf_adj_parkrec)) +
  geom_point() +
  geom_label(aes(label = state))
```
:::

:::column
```{r}
library(ggrepel)

tidykids_wider |>
  filter(state != "California") |>
  ggplot(aes(x = inf_adj_edsubs, y = inf_adj_parkrec)) +
  geom_point() +
  geom_label_repel(aes(label = state))
```
:::
:::

# Today: Compound Plots

## Compound Plots
<hr>
**Compound plots** are 2+ plots combined into one figure

Three packages for combining plots:

- {patchwork} newest (2018)
- {cowplot}
- {gridExtra} oldest (2010); we won't cover it today

# {patchwork}

## {patchwork} {.smaller}
<hr>
- {patchwork} is designed to work seamlessly with {ggplot2}
- It allows you to arrange plots in a grid-like fashion using a simple syntax
- You can combine plots in rows and columns using `+` , `|`, and `/` operators
- You can also add titles, customize the layout of the combined plots, and adjust the legend, among other things

## {patchwork} {.smaller}
<hr>
1. Make all the ggplots you want first
2. Store them to individual objects

## {patchwork} {.smaller}
<hr>

:::{.columns .extra-small-font}
:::{.column}
<br>
```{r}
library(palmerpenguins)

p1 <- ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm)) +
  geom_point(aes(color=species)) +
  geom_smooth(method = "lm", se = FALSE, color="#4F4F4F") +
  theme_minimal() +
  labs(title = "Flipper Length vs. Bill Length",
       x = "Bill Length (mm)",
       y = "Flipper Length (mm)") +
  scale_color_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01")) +
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10))

p1
```

:::

:::{.column}
<br>
```{r}
p2 <- ggplot(penguins, aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot()+
  theme_minimal() +
  labs(title = "Flipper Length by Species",
       x = "Species",
       y = "Flipper Length (mm)") +
  scale_fill_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01"))+
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10))

p2
```

:::
:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's combine them
- Simplest case
```{r, fig.height=4.5}
#install.packages("patchwork")
library(patchwork)

p1 + p2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's combine them
- `+` operator tries to keep the plots in a square-ish grid; fills by row
```{r, fig.height=4.5}
p1 + p1 + p2 + p2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's combine them
- `|` operator creates columns
```{r, fig.height=4.5}
p1 | p1 | p2 | p2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's combine them
- `/` operator creates rows
```{r, fig.height=4.5}
p1 / p1 / p2 / p2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's combine them

```{r, fig.height=4.5}
p1 | p2 / p2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's combine them
- You can also use parentheses to group, just like in math

```{r, fig.height=4.5}
(p1 | p2) / p2
```

:::
<!-- ## {patchwork} -->
<!-- <hr> -->
<!-- :::{.smaller-font} -->
<!-- - Let's combine them -->

<!-- ```{r, fig.height=4.5} -->
<!-- #install.packages("patchwork") -->
<!-- library(patchwork) -->

<!-- combined_plot <- p1 + p2 -->

<!-- combined_plot -->
<!-- ``` -->

<!-- ::: -->

<!-- # Commercial Break -->

<!-- ## Calculator Math -->
<!-- <hr> -->
<!-- - Think about an old calculator - even maybe the one on your phone -->
<!-- $$(1+2+3)/4  = \frac{???}{???}$$ -->
<!-- [$$(1+2+3)/4  = \frac{1+2+3}{4}$$]{.fragment} -->

<!-- # Regularly Scheduled Programming -->

```{r, echo = F}
p3 <- penguins |>
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm", se = FALSE, color="#4F4F4F") +
  theme_minimal() +
  labs(title = "Body Mass vs. Flipper Length",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)") +
  scale_color_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01")) +
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10))

p4 <- penguins |>
  ggplot(aes(x = species, y = body_mass_g)) +
  geom_boxplot(aes(fill = species))+
  theme_minimal() +
  labs(title = "Body Mass",
       x = "Species",
       y = "Body Mass (g)") +
  scale_fill_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01"))+
  theme(legend.title = element_blank(),
        plot.title = element_text(size = 10))

p5 <- penguins |>
  group_by(species) |>
  summarize(mean_body_mass = mean(body_mass_g, na.rm=T),
            sd_body_mass = sd(body_mass_g, na.rm = T)) |>
  ungroup() |>
  ggplot(aes(x = species, y = mean_body_mass, fill = species)) +
  geom_col() +
  geom_errorbar(aes(ymin = mean_body_mass - sd_body_mass,
                    ymax = mean_body_mass + sd_body_mass),
                width = 0.2, position = position_dodge(0.9)) +
  theme_minimal() +
  labs(title = "Mean Body Mass",
       x = "Species",
       y = "Mean Body Mass (g)") +
  scale_fill_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01"))+
  scale_y_continuous(limits = c(0,6500),
                     breaks = seq(0, 6000, by = 1000)) +
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10))
  
```

# Welcome to: <br> *What's My Code?!?*

## {patchwork} {.smaller}
<hr>
- **#1**: In chat! What's my code?...
```{r, fig.height=4.5, echo=F}
q1 <- ggplot() +
  annotate("text", x = 0, y = 0, label = "p1", size = 20)
q2 <- ggplot() +
  annotate("text", x = 0, y = 0, label = "p2", size = 20)
q3 <- ggplot() +
  annotate("text", x = 0, y = 0, label = "p3", size = 20)
q4 <- ggplot() +
  annotate("text", x = 0, y = 0, label = "p4", size = 20)
q5 <- ggplot() +
  annotate("text", x = 0, y = 0, label = "p5", size = 20)

(q1 | q2) / q3
```

## {patchwork} {.smaller}
<hr>
- **#1**: In chat! What's my code?...
```r
(p1 | p2) / p3

#(p1 + p2) / p3 Also works
```
```{r, fig.height=4.5, echo=F}
(q1 | q2) / q3
```

## {patchwork} {.smaller}
<hr>
- **#2**: In chat! What's my code?...
```{r, fig.height=4.5, echo=F}

q1 | (q2 + q3) / q4
```

## {patchwork} {.smaller}
<hr>
- **#2**: In chat! What's my code?...
```r
p1 | (p2 | p3) / p4

# p1 | (p2 + p3) / p4 Also works
```
```{r, fig.height=4.5, echo=F}
q1 | (q2 | q3) / q4
```

## {patchwork} {.smaller}
<hr>
- **#3**: In chat! What's my code?...
```{r, fig.height=4.5, echo=F}

(q1 + q2 + q3 + q4) / q5
```

## {patchwork} {.smaller}
<hr>
- **#3**: In chat! What's my code?...
```r
(p1 + p2 + p3 + p4) / p5

# ((p1 | p2)/(p3 | p4)) / p5 Also (generally) works
# ((p1 + p2)/(p3 + p4)) / p5 Also (generally) works
```
```{r, fig.height=4.5, echo=F}
(q1 + q2 + q3 + q4) / q5
```

## {patchwork} {.smaller}
<hr>
- **#3**: In chat! What's my code?...
- In the weeds a little... how are these different?

::::{layout="[1,1]"}
:::{.column}
```r
(p1 + p2 + p3 + p4) / p5
```
```{r, fig.height=4.5, echo=FALSE}
(q1 + q2 + q3 + q4) / q5
```
:::
:::{.column}
```r
((p1 + p2)/(p3 + p4)) / p5
```
```{r, fig.height=4.5, echo=FALSE}
((q1 + q2)/(q3 + q4)) / q5
```
:::
::::

## {patchwork} {.smaller}
<hr>
- **#3**: In chat! What's my code?...
- In the weeds a little... how are these different?
- By default, it distributes the vertical space evenly across groupings

::::{layout="[1,1]"}
:::{.column}
```r
# Two groupings: 50% and 50%
(p1 + p2 + p3 + p4) / p5
```
```{r, fig.height=4.5, echo=FALSE}
# Two groupings: 50% and 50%
(q1 + q2 + q3 + q4) / q5
```
:::
:::{.column}
```r
# Three groupings: 33%, 33%, and 33%
((p1 + p2)/(p3 + p4)) / p5
```
```{r, fig.height=4.5, echo=FALSE}
# Three groupings: 33%, 33%, and 33%
((q1 + q2)/(q3 + q4)) / q5
```
:::
::::


## {patchwork}
<hr>
:::{.smaller-font}
- I made several plots with penguins data (hidden code)
```{r, fig.height=4.5}
combined_plot <- (p1 | p2) / (p3 | p4 | p5) #Note: It does the same default space distribution horizontally

combined_plot
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- This is the configuration I want. Let's make it look better...
```{r, fig.height=4.5}
combined_plot_2 <- (p1 | p2) / (p3 | (p4 | p5))

combined_plot_2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- These legends are all providing the same information...
```{r, fig.height=4.5}
combined_plot_2 + plot_layout(guides = 'collect')
```

:::

## {patchwork} {.smaller}
<hr>
:::{.smaller-font}
- It will only collect/combine identical legends
- Otherwise, I can clean the legends up in the original plots with `theme(legend.position = "none")`
```{r, echo=F}
p1 <- ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm)) +
  geom_point(aes(color=species)) +
  geom_smooth(method = "lm", se = FALSE, color="#4F4F4F") +
  theme_minimal() +
  labs(title = "Flipper Length vs. Bill Length",
       x = "Bill Length (mm)",
       y = "Flipper Length (mm)") +
  scale_color_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01")) +
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10),
        legend.position = "none")

p2 <- ggplot(penguins, aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot()+
  theme_minimal() +
  labs(title = "Flipper Length",
       x = "Species",
       y = "Flipper Length (mm)") +
  scale_fill_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01"))+
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10),
        legend.position = "none")

p3 <- penguins |>
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm", se = FALSE, color="#4F4F4F") +
  theme_minimal() +
  labs(title = "Body Mass vs. Flipper Length",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)") +
  scale_color_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01")) +
   theme(legend.title = element_blank(),
        plot.title = element_text(size = 10),
        legend.position = "none")

p4 <- penguins |>
  ggplot(aes(x = species, y = body_mass_g)) +
  geom_boxplot(aes(fill = species))+
  theme_minimal() +
  labs(title = "Body Mass",
       x = "Species",
       y = "Body Mass (g)") +
  scale_fill_manual(values = c("Chinstrap" = "#C65CCB",
                               "Gentoo" = "#077175",
                               "Adelie" = "#FF6A01"))+
  theme(legend.title = element_blank(),
        plot.title = element_text(size = 10),
        legend.position = "none")
```

```{r, fig.height=4.5}
combined_plot_2 <- (p1 | p2) / (p3 | (p4 | p5))
combined_plot_2 <- combined_plot_2 + plot_layout(guides = 'collect')
combined_plot_2
```

:::

## {patchwork}
<hr>
:::{.smaller-font}
- Let's add a title to the whole figure and tag/labels to each plot
 - Can use numbers, letters, roman numerals for tags (upper/lowercase)
```{r, fig.height=4.5}
combined_plot_2 <- combined_plot_2 + plot_annotation(title = 'Fig 1.4: Plotting Portraits of Perplexing Penguins',
                                                     tag_levels = 'A')
combined_plot_2
```
:::

## {patchwork}
<hr>
:::{.smaller-font}
- It does a lot more
  - Handles redundant axes
  - Manual sizing
  - More!
- [Investigate the documentation](https://patchwork.data-imaginist.com/articles/guides/assembly.html) for more details
:::

# {cowplot}

## {cowplot}{.smaller}
<hr>
:::{.extra-small-font}
- Similar to {patchwork} but written by Wilke
- Works similarly, but feels a bit more complicated

```{r, fig.height=4.5}
#install.packages("cowplot")
library(cowplot)

top_row <- plot_grid(p1, p2, ncol = 2, labels = c("A", "B"))
bottom_row <- plot_grid(p3, p4, p5, ncol = 3, labels = c("C", "D", "E"))
combined_plot_4 <- plot_grid(top_row, bottom_row, ncol = 1)

combined_plot_4
```

:::

## {patchwork} vs. {cowplot}
<hr>
- {patchwork} is newer and written for ease of use by Pedersen (co-author of ggplot book 3rd ed.)
- [{cowplot}](https://wilkelab.org/cowplot/articles/plot_grid.html) is older and written by Wilke
- I find {gridExtra} to be a bit clunky
- Recommendation: {patchwork}

# Facets (again)

## Faceting {.smaller}
<hr>
:::{.extra-small-font}
- We have used `facet_wrap()` to create multiple facets in different panes
- You can also use `facet_wrap()` to create small multiples on a semi-shared grid
- Think back to the multiple distributions graph from Week 6
:::

```{r, fig.height=4.5}
ggplot(data = penguins, aes(x = flipper_length_mm)) +
  geom_histogram(aes(fill = species), alpha = 0.5, position = "identity") + 
  scale_fill_manual(values = c("darkorange","purple","cyan4")) +
  labs(x = "Flipper length (mm)",
       y = "Frequency",
       title = "Distribution of Flipper Lengths")+
  theme_minimal()
```


## Faceting {.smaller}
<hr>
:::{.extra-small-font}
- You call also display them separately, side-by-side with `facet_wrap()`
- Here: using the the *same y-axis scale*
:::

```{r, fig.height=4.5}
ggplot(penguins, aes(x = flipper_length_mm)) +
  geom_histogram(aes(fill = species), alpha = 0.5, position = "identity") + 
  scale_fill_manual(values = c("darkorange","purple","cyan4")) +
  labs(x = "Flipper length (mm)",
       y = "Frequency",
       title = "Distribution of flipper lengths")+
  theme_minimal()+
  facet_wrap(~species, nrow = 1)+
  theme(legend.position = "none")
```

## Faceting {.smaller}
<hr>
:::{.extra-small-font}
- You call also display them separately, side-by-side
- Here: **NOT** using the the *same y-axis scale* --> `"free_y"`
:::

```{r, fig.height=4.5}
ggplot(penguins, aes(x = flipper_length_mm)) +
  geom_histogram(aes(fill = species), alpha = 0.5, position = "identity") + 
  scale_fill_manual(values = c("darkorange","purple","cyan4")) +
  labs(x = "Flipper length (mm)",
       y = "Frequency",
       title = "Distribution of flipper lengths")+
  theme_minimal()+
  facet_wrap(~species, nrow = 1, scales = "free_y")+
  theme(legend.position = "none")
```

## Faceting {.smaller}
<hr>
:::{.extra-small-font}
- Note: `scales = "free_y"` (or `free_x` if on x) also allows for different discrete scales in each facet
  
:::

```{r, echo=FALSE}
tidykids <- tidykids |>
  mutate(region = case_when(
    state %in% c("Maine", "New Hampshire", "Vermont", "Massachusetts", "Rhode Island", 
                 "Connecticut", "New York", "New Jersey", "Pennsylvania") ~ "Northeast",
    state %in% c("Ohio", "Indiana", "Illinois", "Michigan", "Wisconsin", "Minnesota",
                 "Iowa", "Missouri", "North Dakota", "South Dakota", "Nebraska", "Kansas") ~ "Midwest",
    state %in% c("Delaware", "Maryland", "Virginia", "West Virginia", "North Carolina", 
                 "South Carolina", "Georgia", "Florida", "Kentucky", "Tennessee", 
                 "Alabama", "Mississippi", "Arkansas", "Louisiana", "Oklahoma",
                 "Texas", "District of Columbia") ~ "South",
    state %in% c("Montana", "Idaho", "Wyoming", "Colorado", "New Mexico", "Arizona", 
                 "Utah", "Nevada", "California", "Oregon", "Washington", "Hawaii",
                 "Alaska") ~ "West"))
```

:::{.smaller-font}

```{r, fig.height=3.75}
tidykids |>
  filter(year == 2016, expenditure == "PK12ed") |>
  mutate(state = fct_reorder(state, inf_adj_perchild)) |>
  ggplot(aes(x = inf_adj_perchild, y = state)) +
  geom_col(fill="#007A33", alpha=0.7) +
  facet_wrap(~region, scales = "free_y") +
  labs(title = "Inflation Adjusted Per Child Expenditure on Pre-K Through 12 Education (2016)")+
  theme_minimal() +
  theme(axis.title = element_blank())+
  scale_x_continuous(labels = scales::label_dollar())
```

:::

# More Annotations

## Annotations {.smaller}
<hr>
- a plot to build on...

```{r, fig.height=4.5}
p8 <- ggplot(mtcars, aes(x = wt, y = mpg)) + 
  geom_point()+
  labs(title = "Weight vs. MPG of Cars",
    x = "Weight",
    y= "MPG")

p8
```


## Annotations: Text {.smaller}
<hr>
- We learned about `text` and `label` annotations last week.
```{r, fig.height=4.5}
p9 <- ggplot(mtcars, aes(x = wt, y = mpg)) + 
  geom_point()+
  labs(title = "Weight vs. MPG of Cars",
    x = "Weight",
    y= "MPG") +
  theme_minimal() +
  annotate("text", x = 3, y = 30,
          label = "These cars are fuel efficient")
  
p9
```


## Annotations: Text + Rect {.smaller}
<hr>
- Let's add a rectangle to highlight a specific area of the plot
```{r, fig.height=4.5}
p10 <- ggplot(mtcars, aes(x = wt, y = mpg)) + 
  geom_point()+
  labs(title = "Weight vs. MPG of Cars",
    x = "Weight",
    y= "MPG") +
  theme_minimal() +
  annotate("text", x = 3, y = 30,
           label = "These cars are fuel efficient") +
  annotate("rect", xmin = 1.5, xmax = 2.5, ymin = 25, ymax = 35, alpha = .2, fill = "cornflowerblue")

p10
```


## Annotations: {gghighlight} {.smaller}
<hr>
- Or use {gghighlight} to highlight specific points on the plot
```{r, fig.height=4.5}
library(gghighlight)

p11 <- ggplot(mtcars, aes(x = wt, y = mpg)) + 
  geom_point(color="cornflowerblue")+
  labs(title = "Weight vs. MPG of Cars",
    x = "Weight",
    y= "MPG") +
  theme_minimal() +
  annotate("text", x = 3, y = 30,
           label = "These cars are fuel efficient")+
  gghighlight(mpg > 25)

p11
```


# [Mini-Project #2 & Final](https://utk.instructure.com/courses/239375/assignments/2326753)

# Collaborative Discussion

## Collaborative Discussion
<hr>
:::{.smaller-font}
Two topics:

- **(1) Share your current ideas from Mini-Project #2 & Final Project**

    - What data are you considering?
    - What graphs are your considering?
    - What concerns do you have?

- **(2) Pull up the Final Project Collaborative Rubric**

    - What should be kept?
    - What should be removed?
    - What should be added or changed?

**Add comments to the document using the comment tool!**

**Be prepared for a spokesperson in your group to share (re: #1 and re: #2)**
:::

## Looking Ahead
<hr>
- Reading:
    - Brin, L. D. (n.d.)
    - Ramler (2023): Sections 13.1 & 13.2 ONLY
    - {stringr} cheatsheet
- Assignment: Mini-Project #2, Due 11/7
- Assignment: Assignment 10, Due 10/29


## Next Semester + Beyond {.smaller}
<hr>
- If you aren't registered already, please consider the [Educational Data Science Graduate Certificate](https://volsonline.utk.edu/programs-degrees/educational-data-science-gc/#courses).
- This class completes 25% of what you need.
- The capstone can be shaped around your interests/research.

## Attribution for materials used today
<hr>
* Data Science in a Box by Mine Çetinkaya-Rundel
* <https://datasciencebox.org/>
* License: [Creative Commons Attribution-ShareAlike 4.0 International](https://datasciencebox.org/license)