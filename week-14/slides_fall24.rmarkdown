---
subtitle: "Interactive Maps"
title: "Week 13 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r setup, include=FALSE}
##NOTE TO SELF: NEED TO ACTUALLY USE {here} so I don't have to edit the file paths when running each chunk to include "week-13" and then take them out to knit. So annoying.

library(tidyverse)
```


# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.smaller-font}
- Weekly Check In
- Final Projects
- Revisiting Static Maps
- Interactive maps with plotly
- Collaborative Practice
- Interactive maps with leaflet
- Looking Ahead
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Final Projects

## Final Projects{.smaller}
<hr>
- Presentations: **Dec. 3rd**
    - Slides on Course-wide Deck (see Canvas Assignment) prior to class
    - Each person will have 3-4 min to present
    - Feedback 3-4 min after
    - Non-presenters will complete feedback form for each presenter
- Final Project Due: **Dec. 10th**
    - Should consider the feedback from your presentation
    - No late submissions/extensions
    - No written feedback on Canvas submission
    
## Final Projects{.smaller}
<hr>
- Cleaning up your final file:
```r
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```
- Put this in your setup chunk!

# Static Maps

## Static Maps - Roughly 3 Cases{.smaller}
<hr>

:::{.extra-small-font}
1. **sf object & data (`.csv`) in same CRS**
    - Yay! Easiest case
    - Some options:
        -  `left_join()` data to sf object (if possible): plot one `geom_sf()` layer [*Assn: 12*]
        - Plot two `geom_sf()` layers (`st_as_sf()` data if needed)
        - Plot one `geom_sf()` layer with `geom_point()` [*TODAY*]
2. **sf object & data (`.csv`) in different CRS**
    - Options
        - `left_join()` data to sf object: one `geom_sf()` layer [*Australia*]
        - `st_transform()` data to match sf object's CRS: two `geom_sf()` layers [*Knox Zones*]
3. **sf object has multiple combined CRS/projections**
    - More technical, but can be done
    - Ex. US projection in {ussf} (AK/HI problem)
    - Have to piece-wise re-project, transform

:::

# Interactive Maps in R

## Interactive Maps in R{.smaller}
<hr>
- New York Times graphics editor Gregor Aisch noted that only 10 to 15 percent of readers who visit an interactive visualization on their site actually click on anything. 
-  Is it worth the time and effort to make these things? 

. . .

As with most design-related things, it depends on the goals and the audience of your visualization.


::: aside
See talk: https://vimeo.com/182590214
:::

## Interactivity
<hr>
:::: {.columns}

::: {.column width="40%"}
- Immersion
- Flexibility
- Zooming, hover-over, pop-ups
:::

::: {.column width="60%"}
![](snow.gif)
:::

::::

## Interactivity
<hr>
{{< video https://youtu.be/hkUCrTfgaw8?si=4CszJ91H62HoCYHW&t=7 width="1000" height="600">}}

## Packages for interactive maps in R {background-image="logos.png"}
<hr>
- plotly + ggplot
- leaflet

Other packages include:

- ggiraph + ggplot
- highcharter

# Start with a Static Map

## Static Map
<hr>
Our data:
- The `rgbif` package allows you to access data from the Global Biodiversity Information Facility (GBIF).

```{r}
#install.packages("rgbif")
library(rgbif)
```


## Static Map{.smaller}
<hr>
Our data:
- The `rgbif` package allows you to access data from the Global Biodiversity Information Facility (GBIF).

```{r}
monarchs <- occ_search(scientificName = 'Danaus plexippus') #provides a gbif object
monarch_data <- monarchs$data #provides a tibble

glimpse(monarch_data[,c(1:4,77)])
```


. . .

- Note: If you look at the help file `?occ_search()`, it tells you that decimalLat/Long (aka: lat/long), is in CRS WGS84 (EPSG: 4326)

## Static Map{.smaller}
<hr>
- The package {rnaturalearth} provides a map of countries of the world.

- Use `ne_countries()` to pull country sf object and choose scale


```{r}
# install.packages("rnaturalearth")
# install.packages("rnaturalearthdata")
library(sf)
library(rnaturalearth)

world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
st_crs(world) #Yay! WGS84
```


## Static Map: Plot base {.smaller}
<hr>
First, let's start with creating a base map of the world using ggplot2's `geom_sf()`.


```{r}
library(ggplot2)

ggplot(data=world) +
  geom_sf(color = "white", linewidth = 0.1, fill = "#0C1337") +
  theme_minimal()
```


## Static Map: Layer data {.smaller}
<hr>
:::{.smaller-font}
We can layer the Monarch butterfly data from `monarch_data`:


```{r}
ggplot(data=world) +
  geom_sf(color = "white", linewidth = 0.1, fill = "#0C1337") +
  geom_point(data = monarch_data, aes(x = decimalLongitude, y = decimalLatitude,
                                      color = lifeStage), size = 0.5) +
  theme_minimal()
```


:::

# Adding Interactivity

## `ggplot()` + `plotly` {.smaller}
<hr>
- plotly is an R package for creating interactive web-based graphs via the open source JavaScript graphing library `plotly.js`.


```{r}
# install.packages("plotly")
library(plotly)
```


::: aside
[Getting Started with Plotly in ggplot2](https://plotly.com/ggplot2/getting-started/)
:::

## `ggplot()` + `plotly` {.smaller}
<hr>
Use the function `ggplotly()` to draw the graph with `plotly.js`.

- Printing the Plotly object will render the chart locally in your web browser or in the RStudio viewer

## `ggplot()` + `plotly` {.smaller}
<hr>
Wrap your plot `p` in `ggplotly()`:


```{r}
p <- ggplot(data=world) +
  geom_sf(color = "white", linewidth = 0.1, fill = "#0C1337") +
  geom_point(data = monarch_data, aes(x = decimalLongitude, y = decimalLatitude,
                                      color = lifeStage), size = 0.5) +
  theme_minimal()
```


## `ggplot()` + `plotly` {.smaller}
<hr>

```{r, echo=TRUE}
ggplotly(p)
```


## `ggplotly()` gallery
<hr>
- How do you make other kinds of interactive maps (or plots) with `ggplotly()`?
- See the [`ggplotly()` gallery](https://plotly.com/ggplot2/)

# Collaborative Practice

## Leaftlet{.smaller}
<hr>
Leaflet is an open-source JavaScript library for interactive maps.

- Simplicity, performance, and usability
- Lots of plugins and documentation

::: aside
[Leaflet](https://leafletjs.com/)
:::

## Leaflet {.smaller}
<hr>
The leaflet R package makes it easy to create Leaflet maps from R.


```{r}
#install.packages("leaflet")
library(leaflet)
```

 
## Leaflet: Base Map {.smaller}
<hr>
Create a base map with `addTiles()`.


```{r}
leaflet() |>
  addTiles()
```


## Leaflet: Adding Components
<hr>
The different components of the map can be added using the pipe operator `|>`.

. . .

However, some operations require the use of base R.

:::: {.columns}

::: {.column width="50%"}
### dplyr

```r
mtcars |> 
  pull(hp)
```
:::

::: {.column width="50%"}
### base R

```r
mtcars$hp
```
:::
::::

## Leaflet: Provider Tiles {.smaller}
<hr>
Specify different tile options with `addProviderTiles`

- A list of free tiles is available at <https://leaflet-extras.github.io/leaflet-providers/preview/>


```{r}
leaflet() |> 
  addProviderTiles(providers$Esri.NatGeoWorldMa)
```


## Leaflet: Zoom{.smaller}
 <hr>

```{r}
leaflet() |> 
  addProviderTiles(providers$Esri.NatGeoWorldMa) |> 
  setView(lng = -83.9294, lat = 35.9546, zoom = 14)
```


## Leaflet: Markers and Tooltips{.smaller}
<hr>
- We can do things like add markers and tooltips.


```{r}
#| code-line-numbers: "|4|5|"
leaflet() |>
  addProviderTiles(providers$Esri.NatGeoWorldMa) |>
  setView(lng = -83.9294, lat = 35.9546, zoom = 14) |>
  addMarkers(lng = -83.9294, lat = 35.9546,
             popup = "<a href='https://www.utk.edu/'>University of Tennessee, Knoxville</a>")
```


## Leaflet: Bringing in Data{.smaller}
<hr>
- Add data when initializing the `leaflet()` function
- `~` tells leaflet to look at the data


```{r}
#| code-line-numbers: "|1|7,8,9|"
#| eval: false
leaflet(monarch_data) |>
  addProviderTiles(providers$Esri.NatGeoWorldMa) |>
  setView(lng = -118.259,
          lat = 34.0507666,
          zoom = 6) |> 
  addCircles(
    ~ decimalLongitude,
    ~ decimalLatitude,
    popup =  ~ scientificName
  ) 
```


## Leaflet: Bringing in Data{.smaller}
<hr>

```{r}
#| echo: false
leaflet(monarch_data) |>
  addProviderTiles(providers$Esri.NatGeoWorldMa) |>
  setView(lng = -118.259,
          lat = 34.0507666,
          zoom = 6) |> 
  addCircles(
    ~ decimalLongitude,
    ~ decimalLatitude,
    popup =  ~ scientificName
  ) 
```


## Leaflet: Customizing Maps{.smaller}
<hr>

```{r}
#| code-line-numbers: "|10-14|"
#| eval: false
leaflet(monarch_data) |>
  addProviderTiles(providers$Esri.NatGeoWorldMa) |>
  setView(lng = -118.259,
          lat = 34.0507666,
          zoom = 6) |> 
  addCircles(
    ~ decimalLongitude,
    ~ decimalLatitude,
    popup =  ~ scientificName,
    weight = 9,
    radius = 40,
    color = "#ffa500",
    stroke = TRUE,
    fillOpacity = 0.8
  ) 
```


## Leaflet: Customizing Maps{.smaller}
<hr>

```{r}
#| echo: false
leaflet(monarch_data) |>
  addProviderTiles(providers$Esri.NatGeoWorldMa) |>
  setView(lng = -118.259,
          lat = 34.0507666,
          zoom = 6) |> 
  addCircles(
    ~ decimalLongitude,
    ~ decimalLatitude,
    popup =  ~ scientificName,
    weight = 9,
    radius = 40,
    color = "#ffa500",
    stroke = TRUE,
    fillOpacity = 0.8
  ) 
```


## Leaflet: Adding Polygons{.smaller}
<hr>
Specify a color scale for your polygons with `fillColor`.


```{r}
#| code-line-numbers: "|3-7|4|5|6|"
#| eval: false
leaflet(data = world) |>
  addTiles() |>
  addPolygons(
    fillColor = topo.colors(10, alpha = NULL),
    stroke = FALSE,
    label = ~ name
  )
```


## Leaflet: Adding Polygons{.smaller}
<hr>

```{r}
#| echo: false
leaflet(data = world) |>
  addTiles() |>
  addPolygons(
    fillColor = topo.colors(10, alpha = NULL),
    stroke = FALSE,
    label = ~ name
  )
```



## Grad certificate
<hr>
The University of Tennessee, Knoxville, offers an online graduate certificate in Educational Data Science for students interested in digital data collection, analysis, visualization, and more in educational settings. The certificate can be added to current graduate students’ studies or pursued as a stand-alone certificate for graduate-level students.

- [More Info](https://volsonline.utk.edu/programs-degrees/educational-data-science-gc/)
- [Apply Here](https://gradschool.utk.edu/academics/forms-central/admission-to-a-graduate-certificate-program/)

# Looking Ahead

## Looking Ahead
<hr>
- No weekly assignment.
- Final Projects!
- Please do TNVoice!
