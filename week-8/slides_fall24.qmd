---
subtitle: "Themes and Colors"
title: "Week 8 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.extra-small-font}
- **Weekly Check In**
- **Where Are We?**
- **Foundational Skills**
    - CRAN vs. remotes
    - `pivot_longer`
- **Themes**
    - Pre-Built
    - Packages
    - Custom
- **Color**
    - Built-in Color
    - Color Palettes
    - Accessibility
- **Collaborative Practice**
- **Looking Ahead**
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# From Last Week...

## From Last Week (#1)...
<hr>
![](student_plot_1_wk8.png)

## From Last Week (#2)...
<hr>
![](student_plot_2_wk8.png)

# Review/ <br>Foundational Skills

## CRAN vs. remotes
<hr>

- Most packages are downloadable from CRAN but not all

:::{layout="[1,1]" .smaller-font}
:::{column}
- `tidyverse` is on CRAN
- `remotes` is a package on CRAN that allows you to install packages from elsewhere

```{r}
#install.packages("tidyverse")
library(tidyverse)

#install.packages("remotes")
library(remotes)
```
:::

:::{column}
- `dsbox` is not on CRAN but is downloadable from GitHub
- We will use the `install_github()` function from `remotes` to install `dsbox`

```{r}
#install_github("tidyverse/dsbox")
library(dsbox)
```
:::
:::

## New data today = AAUP
<hr>

:::{.smaller-font}
The American Association of University Professors (AAUP) is a nonprofit
membership association of faculty and other academic professionals. This report
compiled by the AAUP shows trends in instructional staff as a proportion of 
employees between 1975 and 2011.
:::

::::{.fragment .extra-small-font}
```{r, echo=F}
library(knitr) #ignore this -> just doing it for the kable to print all cols
instructors <- instructors #in dsbox, assigning so it shows in environment
kable(instructors)
```
::::

## tidy data & `pivot_longer`
<hr>

:::{.smaller-font}
**Requirements for tidy data:**

1. Each variable forms a column
2. Each observation forms a row
3. Each value forms a cell

::::{.fragment}

**Question**: Is this data in tidy format? Why or why not?
:::
::::

::::{.fragment .extra-small-font}
```{r, echo=F}
kable(head(instructors,5))
```
::::

## tidy data & `pivot_longer`
<hr>

:::{.smaller-font}
**Requirements for tidy data:**

1. Each variable forms a column
2. Each observation forms a row
3. Each value forms a cell

::::{.fragment}

**Answer**: No:

- *Violates #1*. The column names (except year) are position types, which should be values in a column.
- *Violates #2*. Each row has multiple observations for that year.
- *Violates #3*. The same value types (proportions of whole workforce) are spread across multiple columns.
:::
::::

::::{.fragment}
**Let's tidy**
::::

## tidy data & `pivot_longer`
<hr>

:::{.smaller-font}
**Requirements for tidy data:**

1. Each variable forms a column
2. Each observation forms a row
3. Each value forms a cell

::::{.fragment}

`pivot_longer()`
:::
::::

::::{.fragment .smaller-font}
```{r}
staff_long <- instructors |>
  pivot_longer(cols = -year, #cols: "Which columns do I pivot?"
               names_to = "position", #names_to: "What should I call the new column that holds the old column names?"
               values_to = "proportion") %>% #values_to: "What should I call the new column that holds the old values?"
  mutate(date = as.Date(paste0(year, "-01-01"))) # a mutate call to create a date column in date format (see output)

head(staff_long,10)
```
::::

# Review: Line Plots

## Review: Line Plots
<hr>

```{r}
p <- staff_long |>
  ggplot(aes(x = year, y = proportion, color = position)) +
  geom_line() #Note: color argument implicitly handles grouping

p
```

## Recall ggplot2 Layers
<hr>

Plots made with {ggplot2} are made of numerous layers.

![](images/gglayers.png){fig-align="center"}


## Recall ggplot2 Layers
<hr>
Today, we'll be focusing on `theme()`.

![](images/theme.png){fig-align="center"}


# Data-to-Ink Ratios

## Suggestion from Tufte
<hr>

:::{.smaller-font}
- Edward Tufte, a statistician and professor emeritus at Yale University, is known for his work in data viz.
- Tufte suggests that the data should be the "star of the show" in a visualization --> the data-ink ratio should be high
:::

**What does this mean?**
<br><br>

:::{.fragment}
$$\frac{data}{ink}$$

Think again about the necessity of all the non-data components of your plot - e.g., your theme!
:::

## Themes and non-data ink
<hr>

:::{.smaller-font}
The 'theme' involves editing the content that supports the data but does not deliver the quantitative information itself: background, grid lines, ticks, labels, legends, etc. -- "non-data ink".
:::

:::{layout="[1,1]"}
::: {column}

![Low data-ink ratio](images/low.png)
:::

::: {column}
![High data-ink ratio](images/high.png)
:::

::::

## Themes and non-data ink
<hr>
![](images/data-ink.gif){fig-align="center"}

:::aside
This is all subjective!
:::

# Themes

## Pre-Built Themes
<hr>

:::{.smaller-font}
- {ggplot2} already has [several themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) built in
- You've used these already:
    - `theme_minimal()`
    - `theme_light()`
    - `theme_dark()`
    - `theme_bw()`
    - `theme_void()`
    - `theme_classic()`
    - `theme_linedraw()`
    - `theme_test()`
    - `theme_gray()`
:::

## Theme Packages - {ggthemes}
<hr>

```{r}
library(ggthemes)

p +
  theme_tufte()
```

## Theme Packages - {ggthemes}
<hr>

```{r}
library(ggthemes)

p +
  theme_solarized()
```

## Theme Packages - {ggthemes}
<hr>

```{r}
library(ggthemes)

p +
  theme_excel()
```

## Theme Packages - {pilot}
<hr>

```{r}
#remotes::install_github("olihawkins/pilot")
library(pilot)

p + theme_pilot()
```

## Theme Packages - {hrbrthemes}
<hr>

```{r}
library(hrbrthemes)

p + theme_ipsum_rc()
```

## And So Many More!
<hr>
Check out [Erik Gahner's github page](https://github.com/erikgahner/awesome-ggplot2?tab=readme-ov-file#themes-and-aesthetics) for an incredible list!

# Custom Themes

## Custom Themes
<hr>
- You can make your own theme!
- This is what I do currently.
- Create your theme settings in one doc and copy/paste them into your script. Don't recreate the wheel.

## `theme()` anatomy {auto-animate="true"}
<hr>
```{r}
p <- staff_long |>
  ggplot(aes(x = year, y = proportion, color = position)) +
  geom_line() +
  labs(title = "Instructional staff employment trends")

p
```

## `theme()` anatomy {auto-animate="true"}
<hr>
Make the title 16 point and bold

```{r}
p +
  theme(
    plot.title = element_text(face = "bold", size = 16)
    )
```

## `theme()` anatomy {auto-animate="true"}
<hr>
Place legend on the bottom

```{r}
p +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    legend.position = "bottom"
    )
```

## `theme()` anatomy {auto-animate="true"}
<hr>
Make the background white

```{r}
p +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    legend.position = "bottom",
    panel.background = element_rect(fill = "white")
    )
```

## `theme()` Anatomy Reference Guide
<hr>
![](images/ggplot_elements.png){width=725px fig-align="center"}

::: aside
Source: https://bookdown.org/alapo/learnr/data-visualisation.html

Full list of elements available at ggplot2.tidyverse.org/reference/theme
:::

## Modifying theme components
<hr>
Four basic types of built-in element functions:

* `element_text()` draws labels and headings:

```{r}
p +
  theme(plot.title = element_text(size = 70))
```

## Modifying theme components
<hr>
Four basic types of built-in element functions:

* `element_line()` draws lines by color, linewidth and linetype: 

```{r}
p +
  theme(panel.grid.major = element_line(color = "black"))
```

## Modifying theme components
<hr>
Four basic types of built-in element functions:

* `element_rect()` draws rectangles, mostly used for backgrounds

```{r}
p +
  theme(plot.background = element_rect(color = "red", linewidth = 2))
```

## Modifying theme components
<hr>
Four basic types of built-in element functions:

* `element_blank()` draws nothing

```{r}
p +
  theme(axis.title.x = element_blank())
```

## Modifying theme components
<hr>
Modify multiple theme components in the same `theme()`

```{r}
p +
  theme(plot.title = element_text(size = 70),
        panel.grid.major = element_line(color = "black"),
        plot.background = element_rect(color = "red", linewidth = 2),
        axis.title.x = element_blank())
```

## Modifying theme components
<hr>
Can also add on to an existing theme:

```{r}
#| code-line-numbers: |2
p +
  theme_minimal() +
  theme(plot.title = element_text(size = 70),
        panel.grid.major = element_line(colour = "black"),
        plot.background = element_rect(color = "red", linewidth = 2),
        axis.title.x = element_blank())
```

. . .

What happens if you put `theme()` before `theme_minimal()`?

# BREAK

# Colors

## Built-in colors {.smaller}
<hr>
* R comes pre-loaded with [657 named colors](https://r-charts.com/colors/)
* You can also specify any color using a hex code (#RRGGBB)
* Use the `colors()` command to see the available named colors

```{r}
colors()
```

## Built-in colors
<hr>
Use the name of the color in quotes:

```{r}
#| code-line-numbers: "|3"
staff_long |>
  ggplot(aes(x = position, y = proportion)) +
  geom_col(fill = "royalblue")
```

. . .

What if you put `fill = "royalblue"` inside of `aes()`?

## Built-in colors
<hr>
Inside of `aes()`, `fill` maps to the data, *not* the geometry.

```{r}
#| code-line-numbers: "|2"
staff_long |>
  ggplot(aes(x = position, y = proportion, fill = "royalblue")) +
  geom_col()
```

## Built-in colors
<hr>
You can specify colors for specific values using `scale_fill_manual` and a named vector:

```{r}
#| eval: false
#| code-line-numbers: "|4-11|"
staff_long |>
  ggplot(aes(x = position, y = proportion)) +
  geom_col() +
  scale_fill_manual(
    values = c(
      "full_time_non_tenure_track" = "skyblue",
      "full_time_tenure_track" = "peachpuff1",
      "full_time_tenured" = "palegreen1",
      "grad_student" = "sandybrown",
      "part_time" = "maroon"
    )
  )
```

## Built-in colors {.smaller}
<hr>
You can specify colors for specific values using `scale_fill_manual` and a named vector:

```{r}
#| echo: false
#| error: true
#| eval: true
staff_long |>
  ggplot(aes(x = position, y = proportion)) +
  geom_col() +
  scale_fill_manual(
    values = c(
      "full_time_non_tenure_track" = "skyblue",
      "full_time_tenure_track" = "peachpuff1",
      "full_time_tenured" = "palegreen1",
      "grad_student" = "sandybrown",
      "part_time" = "maroon"
    )
  )
```

Why are there no colors?

## Built-in colors
<hr>
You can specify colors for specific values using `scale_fill_manual` and a named vector **as long as `fill` is mapped to the data**:

```{r}
#| eval: false
#| code-line-numbers: "|2,4-11"
staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_manual(
    values = c(
      "full_time_non_tenure_track" = "skyblue",
      "full_time_tenure_track" = "peachpuff1",
      "full_time_tenured" = "palegreen1",
      "grad_student" = "sandybrown",
      "part_time" = "maroon"
    )
  )
```

## Built-in colors
<hr>
You can specify colors for specific values using `scale_fill_manual` and a named vector **as long as `fill` is mapped to the data**:

```{r}
#| error: true
#| echo: false
staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_manual(
    values = c(
      "full_time_non_tenure_track" = "skyblue",
      "full_time_tenure_track" = "peachpuff1",
      "full_time_tenured" = "palegreen1",
      "grad_student" = "sandybrown",
      "part_time" = "maroon"
    )
  )
```

## Built-in colors {.smaller}
<hr>
What about our earlier line graph?

```{r}
#| code-line-numbers: "|2,4"
#| error: true
staff_long |>
  ggplot(aes(x = year, y = proportion, color = position)) +
  geom_line() +
  scale_fill_manual(
    values = c(
      "full_time_non_tenure_track" = "skyblue",
      "full_time_tenure_track" = "peachpuff1",
      "full_time_tenured" = "palegreen1",
      "grad_student" = "sandybrown",
      "part_time" = "maroon"
    )
  )
```

## Built-in colors {.smaller}
<hr>
We need to make sure we're mapping the correct aesthetic:

```{r}
#| code-line-numbers: "|2,4"
staff_long |>
  ggplot(aes(x = year, y = proportion, color = position)) +
  geom_line() +
  scale_color_manual(
    values = c(
      "full_time_non_tenure_track" = "skyblue",
      "full_time_tenure_track" = "peachpuff1",
      "full_time_tenured" = "palegreen1",
      "grad_student" = "sandybrown",
      "part_time" = "maroon"
    )
  )
```

## {ggplot2} palette packages
<hr>
There are a ton of amazing palette packages out there! Here is an example from [MetBrewer](https://github.com/BlakeRMills/MetBrewer):

```{r}
library(MetBrewer)

staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_manual(values = met.brewer("Hokusai1"))
```

## {ggplot2} palette packages
<hr>
Let's try the [Egypt](https://github.com/BlakeRMills/MetBrewer?tab=readme-ov-file#egypt) palette:

```{r}
#| eval: false
library(MetBrewer)

staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_manual(values = met.brewer("Egypt"))
```

. . .

```{r}
#| echo: false
#| error: true
library(MetBrewer)

staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_manual(values = met.brewer("Egypt"))
```

<br>
<br>
Why didn't this work?

## {ggplot2} palette packages
<hr>
The {viridis} package provides continuous palettes:

![](images/viridis.png){fig-align="center"}

## viridis
<hr>
Let's see it in action:

```{r}
library(viridis)

staff_long |>
  ggplot(aes(x = date, y = proportion, color = proportion, group = position)) +
  geom_point() +
  geom_line() +
  scale_color_viridis()
```

## viridis {.smaller}
<hr>
How about with our bar chart?

```{r}
#| eval: false
library(viridis)

staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_viridis()
```

## viridis {.smaller}
<hr>
How about with our bar chart?

```{r}
#| error: true
library(viridis)

staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_viridis()
```

<br>

Why didn't it work?

## viridis
<hr>
viridis uses **continuous** palettes and our data is **discrete**.

```{r}
#| code-line-numbers: "|6"
library(viridis)

staff_long |>
  ggplot(aes(x = position, y = proportion, fill = position)) +
  geom_col() +
  scale_fill_viridis(discrete = TRUE)
```

## viridis  {auto-animate="true"}
<hr>
How would you use viridis on our line graph where `color = position`?

```{r}
library(viridis)

staff_long |>
  ggplot(aes(x = year, y = proportion, color = position)) +
  geom_line()
```

## viridis  {auto-animate="true"}
<hr>
How would you use viridis on our line graph where `color = position`? Answer: `scale_color_viridis(discrete = TRUE)`.

```{r}
#| code-line-numbers: "6"
library(viridis)

staff_long |>
  ggplot(aes(x = year, y = proportion, color = position)) +
  geom_line() +
  scale_color_viridis(discrete = TRUE)
```

## Checklist of tips
<hr>
* Make sure to map to the data appropriately in `aes()` if you are mapping to data; otherwise, it will map to geometry
* Make sure your `color` or `fill` match, i.e., you are not trying to apply `color` to a `fill` aesthetic
* Make sure that if you are using a discrete palette, you have enough values
* Make sure that you are not trying to apply a continuous palette to discrete values

## Finding palette packages
<hr>
* MetBrewer
* wesanderson
* severance

This is a fantastic resource: <https://github.com/EmilHvitfeldt/r-color-palettes>

# Accessibility

## Colors {.smaller}
<hr>
Some people do not possess the usual complement of color receptors and so can distinguish fewer colors than others.

* Because of this, it is important to consider how a color palette will look to people with common forms of color blindness.

You also want to check the contrast between colors to make text legible for visitors with low vision.

* WebAIM checker: [https://webaim.org/resources/contrastchecker/](https://webaim.org/resources/contrastchecker/)


## Colors
<hr>
There are tools to help check your palettes:

* [vischeck.com](https://vischeck.com)
* {dichromat} and {colorBlindness} packages simulate color blindness

![](images/colorblindness.png){fig-align="center"}

## Colors
<hr>
Some color palettes also consider accessibility:

* {viridis} is designed to be perceptually uniform (visually consistent change in color + accessible)
* {RColorBrewer} has colorblind-friendly palettes
* {MetBrewer} has colorblind-friendly palettes
* Accessible Color Palette Generator: [https://venngage.com/tools/accessible-color-palette-generator](https://venngage.com/tools/accessible-color-palette-generator) (Thanks, Andrew!)

## Collaborative Practice
<hr>
- Launch into breakout rooms.
- Cameras off: 3-5 min to review task
- Cameras on: collaborative task work

# Looking Ahead

## Looking Ahead
<hr>
- Reading:
    - Schwabish (2021), Ch 2
    - Christiansen (2023), Ch 9
    - Fung (2020)
    - Wilke (2019), Ch 20
- Discussion Post
- Assignment 8: Graphing and Improving Plots

## Attribution for materials used today
<hr>
* Data Science in a Box by Mine Çetinkaya-Rundel
* <https://datasciencebox.org/>
* License: [Creative Commons Attribution-ShareAlike 4.0 International](https://datasciencebox.org/license)