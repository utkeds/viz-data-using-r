---
subtitle: "Visual Storytelling: Comparing Amounts"
title: "Week 5 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r setup, include=FALSE, echo=FALSE}
library(tidyverse)
library(tidykids)
library(palmerpenguins)

tidykids <- tidykids |>
  mutate(region = case_when(
    state %in% c("Maine", "New Hampshire", "Vermont", "Massachusetts", "Rhode Island", 
                 "Connecticut", "New York", "New Jersey", "Pennsylvania") ~ "Northeast",
    state %in% c("Ohio", "Indiana", "Illinois", "Michigan", "Wisconsin", "Minnesota",
                 "Iowa", "Missouri", "North Dakota", "South Dakota", "Nebraska", "Kansas") ~ "Midwest",
    state %in% c("Delaware", "Maryland", "Virginia", "West Virginia", "North Carolina", 
                 "South Carolina", "Georgia", "Florida", "Kentucky", "Tennessee", 
                 "Alabama", "Mississippi", "Arkansas", "Louisiana", "Oklahoma", "Texas", "District of Columbia") ~ "South",
    state %in% c("Montana", "Idaho", "Wyoming", "Colorado", "New Mexico", "Arizona", 
                 "Utah", "Nevada", "California", "Oregon", "Washington", "Hawaii", "Alaska") ~ "West"
  ))|>
  janitor::clean_names()

starwars <- starwars |>
  janitor::clean_names()

penguins <- penguins |>
  janitor::clean_names()
```

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.extra-small-font}
- Weekly Check In
- Review/ Foundational Skills
    - assigning + printing
    - `==` vs. `=`
    - Mapping versus setting in `aes()`
    - Inheriting aesthetics
    - Saving plots
- Reviewing Knaflic (2015), Ch. 1
- {forcats}
- Comparing Amounts
    - Bar Plots
        - Labeling
            - `coord_flip()`
            - Ordering Axes
        - Grouping, Stacking, Faceting
    - Dot Plots
    - Heat Maps
- Collaborative Practice
- Extensions from Schwabish (2021)
- Looking Ahead

:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Review/ <br>Foundational Skills

## Assigning vs. Printing {.smaller}
<hr>
 - Issue on HW3
 - Often you are running code and not printing the outputs
 - Three scenarios:
  1. Not storing to an object
```{r}
#Prints output fine!

tidykids|>
  head(3)
```

## Assigning vs. Printing {.smaller}
<hr>
 - Issue on HW3
 - Often you are running code and not printing the outputs
 - Three scenarios:
  2. Storing to an object but not calling the object
```{r}
#Oh no! No output :(

temp <- tidykids|>
  head(3)
```
    
## Assigning vs. Printing {.smaller}
<hr>
 - Issue on HW3
 - Often you are running code and not printing the outputs
 - Three scenarios:
  3. Storing to an object and then calling the object
```{r}
#Nice!

temp <- tidykids|>
  head(3)

temp
```    
    
**Please do either #1 or #3**  
    
## `==` vs. `=`
<hr>
- `==`
  - A logical check
  - In English "is equivalent to?"
- `=`
  - Assigns
  - In English "set to" or "map to"...

## Mapping Versus Setting
<hr>

- `aes`thetic mapping from data to visual

:::{layout="[1,1]" .extra-small-font}
:::{column}
- Mapping
    - Occurs within `aes()`
    - Example:
```{r}
tidykids |>
  filter(year == 2016, variable == "PK12ed") |>
  mutate(state = fct_reorder(state, region)) |> #puts regions together
  ggplot(aes(x = state, y = inf_adj_perchild)) +
  geom_col(aes(fill = region)) #mapping
```

:::

:::{column}
- Setting
    - Occurs outside `aes()`
    - Example:
```{r}
tidykids |>
  filter(year == 2016, variable == "PK12ed") |>
  mutate(state = fct_reorder(state, region)) |> #puts regions together
  ggplot(aes(x = state, y = inf_adj_perchild)) +
  geom_col(fill = "lightblue") #setting
```

:::
:::

## Inheriting Aesthetics
<hr>

:::{.smaller-font}
- Aesthetics can be ...
    - ...inherited from the `ggplot()` call:
    
```{r, echo=FALSE}
natnl_mean <- tidykids |>
  filter(year == 2016, variable == "PK12ed") |>
  summarize(national_mean = mean(inf_adj_perchild, na.rm=T)) |>
  pull(national_mean)
```

```{r, fig.height=4}
tidykids |>
  filter(year == 2016, variable == "PK12ed") |>
  mutate(state = fct_reorder(state, region)) |> # puts regions together
  ggplot(aes(x = state, y = inf_adj_perchild, color = region)) +
  geom_col() # geom_col inherits x, y, and color from ggplot()
```

:::

## Inheriting Aesthetics
<hr>

:::{.smaller-font}
- Aesthetics can be ...
    -  ...set within each `geom()` call:
    
```{r, fig.height=4}
tidykids |>
  filter(year == 2016, variable == "PK12ed") |>
  mutate(state = fct_reorder(state, region)) |> 
  ggplot() + 
  geom_col(aes(x = state, y = inf_adj_perchild, color = region)) # aes explicitly set within geom_col()
```

:::

## Inheriting Aesthetics
<hr>

:::{.smaller-font}
- Aesthetics can be ...
    - ...inherited but overridden:
    
```{r, fig.height=4}
tidykids |>
  filter(year == 2016, variable == "PK12ed") |>
  mutate(state = fct_reorder(state, region)) |> 
  ggplot(aes(x = state, y = inf_adj_perchild, color = region)) +
  geom_col() +
  geom_hline(aes(yintercept = natnl_mean, color = "National Mean")) # Overrides color within geom_hline
```

:::

## Saving Plots
<hr>

:::{.smaller-font}
- Two primary ways to save a plot: 
1. `ggsave()`
    - `ggsave()` saves the last plot created if plot unspecified
    - `plot`, `width`, `height`, `units`, and `dpi` are optional arguments

```{r, eval-FALSE}
ggsave("my_plot.png", plot = last_plot(), width = 1200, height = 650, units = "px", dpi = 300)
```
<br>

2. Plot Export
    - Export the plot from the viewer pane
    - Save as image or PDF
    
**Demo**
:::

## Knaflic (2015), Chapter 1
<hr>
:::{.small-font}
- *Who*: The audience
    - Researchers, policymakers, practitioners, the public, etc.
- *What*: What do you need your audience to know and do?
    -"The point of this graph is..."
- *How*: 
    - Knaflick (Business) - "What data is available that will help make my point?"
    - (Research): What data is available that illustrates my finding/result?"

**Thanks for engaging with discussion post.**

:::

# {forcats} (See cheatsheet)

## {forcats} (factor vars)
<hr>
`fct_relevel()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - Titanic**]{.small-font}
<br>
<br>
```{r echo=FALSE}
titanic <- read_csv("Titanic-Dataset.csv")

surv_rates_age_class <- titanic |>
  mutate(age_group = case_when(
    Age < 13 ~ "child",
    Age >= 13 & Age < 19 ~ "teen",
    Age >=18 ~ "adult")) |>
  group_by(Pclass, age_group)|>
  summarize(
    avg_survival = mean(Survived, na.rm = TRUE),
    n = n()) |>
  ungroup()|>
  filter(!is.na(age_group))|>
  arrange(desc(avg_survival))

surv_rates_age_class$Pclass <- plyr::mapvalues(surv_rates_age_class$Pclass,
                                         from = c(1,2,3),
                                         to = c("First", "Second", "Third"))

surv_rates_age_class <- surv_rates_age_class |>
  mutate(Pclass = fct_relevel(Pclass, "Second", "Third", "First"))

surv_rates_age_class |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>

:::{.extra-small-font}
- X axis lacks order

:::

```{r}
surv_rates_age_class |>
  filter(age_group == "child")|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

## {forcats} (factor vars)
<hr>
`fct_relevel()`
<br>
<hr>

:::{layout="[40,60]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[`fct_relevel()`]{.small-font}

::::{.extra-small-font}
- **Re-orders factors by hand**: you manually specify the order
::::
```{r, eval=FALSE}
surv_rates_age_class |>
  filter(age_group == "child")|>
  mutate(Pclass = fct_relevel(Pclass, "First", "Second", "Third"))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>
```{r, echo=FALSE}
surv_rates_age_class|>
  filter(age_group == "child")|>
  mutate(Pclass = fct_relevel(Pclass, "First", "Second", "Third"))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

## {forcats} (factor vars)
<hr>
`fct_reorder()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - Titanic**]{.small-font}
<br>
<br>
```{r echo=FALSE}
surv_rates_age_class|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>

:::{.extra-small-font}
- What if I wanted this reordered by rate, not class?

:::

```{r}
surv_rates_age_class|>
  filter(age_group == "child")|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

## {forcats} (factor vars)
<hr>
`fct_reorder()`
<br>
<hr>

:::{layout="[40,60]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[`fct_reorder()`]{.small-font}

::::{.extra-small-font}
- **Re-orders factors by values of another variable**
::::
```{r, eval=FALSE}
surv_rates_age_class|>
  filter(age_group == "child")|>
  mutate(Pclass = fct_reorder(Pclass, avg_survival))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>
```{r, echo=FALSE}
surv_rates_age_class|>
  filter(age_group == "child")|>
  mutate(Pclass = fct_reorder(Pclass, desc(avg_survival)))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

# Today's Work

## 3 Required Components of a ggplot
<hr>
- Data - may need to wrangle!
- Aesthetics - maps variables to visual properties
- Geometries - the shapes that represent the data
    - Choose `geom`s from cheatsheet!

## Comparing Amounts
<hr>
- Today: Comparing **amounts**
    - Bar Plots
    - Dot Plots
    - Heat Maps
- If you have **distributions** wait until next week!

## Comparing Amounts
<hr>
Bar Chart | `geom_bar()` or `geom_col()`

<hr>

:::{layout="[1,1]" .extra-small-font}
:::{column}
- `geom_bar()`
    - Bar height represents number of observations in data
    - Counts observations up for you
    - Only need to specify `x` -> what to count!

```{.r code-line-numbers="|2-3"}
penguins |>
  ggplot(aes(x = species)) +
    geom_bar(fill = "#6ABCEB") +
    labs(title = "Number of Observations by Penguin Species",
       x = "Penguin Species", y = "Number of Observations") +
    theme_minimal()
```

```{r, fig.height=2.5, fig.width=4.5, echo=FALSE}
penguins |>
  ggplot(aes(x = species)) +
    geom_bar(fill = "#6ABCEB") +
    labs(title = "Number of Observations by Penguin Species",
       x = "Penguin Species", y = "Number of Observations") +
    theme_minimal()
```
:::

:::{column}
 - `geom_col()`
    - Bar height represents a value in the data
    - Requires a `y` variable in aesthetic
    - May require use of `group_by()` & `summarize()`
    
```{.r code-line-numbers="|2-6"}
penguins |>
  group_by(species) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = species, y = n)) +
    geom_col(fill = "#6ABCEB") +
    labs(title = "Number of Observations by Penguin Species",
       x = "Penguin Species", y = "Number of Observations") +
    theme_minimal()
```

```{r, fig.height=2.5, fig.width=4.5, echo = FALSE}
penguins |>
  group_by(species) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = species, y = n)) +
    geom_col(fill = "#6ABCEB") +
    labs(title = "Number of Observations by Penguin Species",
       x = "Penguin Species", y = "Number of Observations") +
    theme_minimal()
```
:::

:::


## Comparing Amounts
<hr>
Bar Chart `geom_col()`

<hr>

:::{.extra-small-font}

- **Problem:** With bar plots, labels are often hard to read/overlap
```{r, fig.height=3, fig.width=6}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    theme_minimal()
  
```

:::

## Comparing Amounts
<hr>
Bar Chart `geom_col()`

<hr>

:::{.extra-small-font}

- **Problem:** With bar plots, labels are often hard to read/overlap
- Two ways to address:

:::{layout="[1,1]"}
:::{column}
1. `coord_flip()` - flips x and y axes
```{.r code-line-numbers="|9"}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    coord_flip() +
    theme_minimal()
  
```

```{r, fig.height=3, fig.width=6, echo=FALSE}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    coord_flip() +
    theme_minimal()
  
```

:::

:::{column}
2. Rotate axis labels (typically less desirable)
```{.r code-line-numbers="|10"}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
```

```{r, fig.height=3, fig.width=6, echo=FALSE}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
```

:::

:::
:::

## Comparing Amounts
<hr>
Bar Chart `geom_col()`

<hr>

:::{.extra-small-font}

- **Problem:** We often need to more logically reorder the bars
- Recall `forcats` from wk 3!
    - `fct_relevel()` : manually reorder
    - `fct_reorder()` : reorder by another variable

:::{layout="[1,1]"}
:::{column}
<br><br>
```{.r code-line-numbers="|5"}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  mutate(eye_color = fct_reorder(eye_color, n)) |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    coord_flip() +
    theme_minimal()
  
```

:::

:::{column}
```{r, fig.height=3, fig.width=6, echo=FALSE}
starwars |>
  group_by(eye_color) |>
  summarize(n = n()) |>
  ungroup() |>
  mutate(eye_color = fct_reorder(eye_color, n)) |>
  ggplot(aes(x = eye_color, y = n)) +
    geom_col(fill = "#4C5970") +
    labs(title = "Eye Color of Star Wars Characters",
       x = "Eye Color", y = "Number of Star Wars Characters") +
    coord_flip() +
    theme_minimal()
  
```
:::
:::
:::

## Grouping, Stacking, Faceting
<hr>
:::{.smaller-font}
- Stacking, dodging, and faceting are helpful ways of representing more than one amount per category
    - Generally, these are appropriate for representing more complex data that still involves amounts
    - **Stacking**: Useful when the sum of the amounts represented by the individual stacked bars and the individual bars' values are of interest
    - **Dodging** (grouping): Useful when we want to draw out comparisons for amounts *within a category*
    - **Faceting**: Useful in similar cases as dodging; can be helpful when you have *many* comparisons or categories
:::

## Grouping, Stacking, Faceting
<hr>
Stacking
<hr>

:::{.smaller-font}

```{.r code-line-numbers="|6"}
penguins |>
  group_by(island,species) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = island, y = n)) +
    geom_col(aes(fill=species), position="stack") +
    labs(title = "Number of Penguin Species Observations per Island",
       x = "Island", y = "Number of Observations") +
    theme_minimal()
```

```{r, fig.height=3, fig.width=6, echo=FALSE}
penguins |>
  group_by(island,species) |>
  summarize(n = n()) |>
  ungroup() |>
  ggplot(aes(x = island, y = n)) +
    geom_col(aes(fill=species), position="stack") +
    labs(title = "Number of Penguin Species Observations per Island",
       x = "Island", y = "Number of Observations") +
    theme_minimal()
```

:::

## Grouping, Stacking, Faceting
<hr>
Dodging
<hr>

:::{.smaller-font}

```{.r code-line-numbers="|4-6|7-8"}
penguins |>
  mutate(bill_length_quintiles = cut_number(bill_length_mm, 5)) |>
  filter(!is.na(bill_length_quintiles)) |>
  group_by(species,bill_length_quintiles) |> # 1st Group: x-axis, 2nd: bar levels
  summarize(mean_flipper_length = mean(flipper_length_mm)) |>
  ungroup() |>
  ggplot(aes(x = species, y = mean_flipper_length, fill = bill_length_quintiles)) +
    geom_col(position="dodge", alpha = 0.9) +
    labs(title = "Flipper Length by Species and Bill Length Quintile",
       x = "Species", y = "Flipper Length (mm)") +
    theme_minimal()
```


```{r, fig.height=3, fig.width=6, echo=FALSE}
colors_seven = RColorBrewer::brewer.pal(8, "PuBu")[3:7]

penguins |>
  mutate(bill_length_quintiles = cut_number(bill_length_mm, 5)) |>
  filter(!is.na(bill_length_quintiles)) |>
  group_by(species,bill_length_quintiles) |> # 1st Group: x-axis, 2nd: bar levels
  summarize(mean_flipper_length = mean(flipper_length_mm)) |>
  ungroup() |>
  ggplot(aes(x = species, y = mean_flipper_length, fill = bill_length_quintiles)) +
    geom_col(position="dodge", alpha = 0.9) +
    labs(title = "Mean Flipper Length by Species and Bill Length Quintile",
       x = "Species", y = "Mean Flipper Length (mm)") +
    scale_fill_manual(values = colors_seven) +
    theme_minimal()
```

:::

## Grouping, Stacking, Faceting
<hr>
Faceting
<hr>

:::{.smaller-font}

```{.r code-line-numbers="|4-6|7-8,13"}
penguins |>
  mutate(bill_length_quintiles = cut_number(bill_length_mm, 5)) |>
  filter(!is.na(bill_length_quintiles)) |>
  group_by(species,bill_length_quintiles) |> # 1st Group: x-axis, 2nd: bar levels
  summarize(mean_flipper_length = mean(flipper_length_mm)) |>
  ungroup() |>
  ggplot(aes(x = bill_length_quintiles, y = mean_flipper_length, fill=bill_length_quintiles)) +
    geom_col() +
    labs(title = "Mean Flipper Length by Species and Bill Length Quintile",
       x = "Bill Length (mm) Quintile", y = "Mean Flipper Length (mm)") +
    scale_fill_manual(values = colors_seven) +
    theme(axis.text.x = element_text(angle = 45, hjust = 0.75, vjust=0.75)) +
    facet_wrap(~species)
```


```{r, fig.height=3, fig.width=6, echo=FALSE}
colors_seven = RColorBrewer::brewer.pal(8, "PuBu")[3:7]

penguins |>
  mutate(bill_length_quintiles = cut_number(bill_length_mm, 5)) |>
  filter(!is.na(bill_length_quintiles)) |>
  group_by(species,bill_length_quintiles) |> # 1st Group: x-axis, 2nd: bar levels
  summarize(mean_flipper_length = mean(flipper_length_mm)) |>
  ungroup() |>
  ggplot(aes(x = bill_length_quintiles, y = mean_flipper_length, fill=bill_length_quintiles)) +
    geom_col() +
    labs(title = "Mean Flipper Length by Species and Bill Length Quintile",
       x = "Bill Length (mm) Quintile", y = "Mean Flipper Length (mm)") +
    scale_fill_manual(values = colors_seven) +
    theme(axis.text.x = element_text(angle = 45, hjust = 0.75, vjust=0.75)) +
    facet_wrap(~species)
```

:::

## Comparing Amounts
<hr>
Dot Plots `geom_point()`

<hr>

:::{.smaller-font}
```{.r code-line-numbers="|4"}
tidykids |>
  filter(year == 2016, variable == "PK12ed", region =="South") |>
  ggplot(aes(x = inf_adj_perchild, y = state)) +
    geom_point(color="purple", size=3) +
    labs(title = "Per Child Education Spending by Southern States",
       x = "Per Child Education Spending (Inflation Adjusted in 2016 USD)", y = "State") +
    theme_minimal()
```
```{r, fig.height=3, fig.width = 6.5, echo=FALSE}
tidykids |>
  filter(year == 2016, variable == "PK12ed", region =="South", state != "District of Columbia") |>
  ggplot(aes(x = inf_adj_perchild, y = state)) +
    geom_point(color="purple", size=3) +
    labs(title = "Per Child Education Spending by Southern States",
       x = "Per Child Education Spending (2016 Inflation Adjusted Thousands of USD)", y = "State") +
    theme_minimal()
```
- Don't do this. These should be in some kind of more easily comparable order.

:::

## Comparing Amounts
<hr>
Dot Plots `geom_point()`

<hr>

:::{.smaller-font}
```{.r code-line-numbers="|3"}
tidykids |>
  filter(year == 2016, variable == "PK12ed", region =="South") |>
  mutate(state = fct_reorder(state, inf_adj_perchild)) |> # reorder by spending
  ggplot(aes(x = inf_adj_perchild, y = state)) +
    geom_point(color="purple", size=3) +
    labs(title = "Per Child Education Spending by Southern States in 2016",
       x = "Per Child Education Spending (Inflation Adjusted in 2016 USD)", y = "State") +
    theme_minimal()
```
```{r, fig.height=3, fig.width = 6.5, echo=FALSE}
tidykids |>
  filter(year == 2016, variable == "PK12ed", region =="South", state != "District of Columbia") |>
  mutate(state = fct_reorder(state, inf_adj_perchild)) |> # reorder by spending
  ggplot(aes(x = inf_adj_perchild, y = state)) +
    geom_point(color="purple", size=3) +
    labs(title = "Per Child Education Spending by Southern States in 2016",
       x = "Per Child Education Spending (2016 Inflation Adjusted Thousands of USD)", y = "State") +
    theme_minimal()
```

:::

## Comparing Amounts
<hr>
Heatmaps `geom_tile()`

<hr>

:::{.smaller-font}
```{.r code-line-numbers="|5"}
tidykids |>
  filter(variable == "PK12ed", region == "South", state != "District of Columbia") |>
  mutate(state = fct_reorder(state, desc(state))) |> # reorder by spending
  ggplot(aes(x = year, y = state, fill = inf_adj_perchild)) +
    geom_tile(color="white", linewidth = 0.25)
```

:::

```{r, echo=FALSE}
tidykids |>
  filter(variable == "PK12ed", region == "South", state != "District of Columbia") |>
  mutate(state = fct_reorder(state, desc(state))) |> # reorder by spending
  ggplot(aes(x = year, y = state, fill = inf_adj_perchild)) +
    geom_tile(color="white", linewidth = 0.25)
```

# Collaborative Practice

## Collaborative Practice
<hr>
:::{.small-font}

- **Individual think time:** 3 minutes (camera off/mute)
    - Review document
    - Review question prompts
    - Start planning possible approaches/pseudocode
- **Introductions:** 2 minutes (camera on/unmute)
- **Collaborative Work:** (camera on/unmute)

:::

## Collaborative Practice
<hr>
- We'll use `gapminder.csv` to practice:
    - Bar plots
    - Dot plots
    - Heat maps
    - Review dplyr skills

# Schwabish Extensions

## Schwabish Extensions
<hr>
Lollipop Plots: `geom_point()` + `geom_segment()`

<hr>

:::{.smaller-font}
```{.r code-line-numbers="|5-6"}
tidykids |>
  filter(year == 2016, variable == "PK12ed", region =="South") |>
  mutate(state = fct_reorder(state, inf_adj_perchild)) |> # reorder by spending
  ggplot(aes(x = inf_adj_perchild, y = state)) +
    geom_point(color="purple", size=3) +
    geom_segment(aes(xend = 0, yend = state), color = "purple") + #inherits x & y from ggplot()
    labs(title = "Per Child Education Spending by Southern States in 2016",
       x = "Per Child Education Spending (Inflation Adjusted in 2016 USD)", y = "State") +
    theme_minimal()
```

```{r, fig.height=3, fig.width = 6.5, echo=FALSE}
tidykids |>
  filter(year == 2016, variable == "PK12ed", region =="South", state != "District of Columbia") |>
  mutate(state = fct_reorder(state, inf_adj_perchild)) |> # reorder by spending
  ggplot(aes(x = inf_adj_perchild, y = state)) +
    geom_point(color="purple", size=3) +
    geom_segment(aes(xend = 0, yend = state), color = "purple") + #inherits x & y from ggplot()
    labs(title = "Per Child Education Spending by Southern States in 2016",
       x = "Per Child Education Spending (2016 Inflation Adjusted Thousands of USD)", y = "State") +
    theme_minimal()
```

:::

## Schwabish Extensions
<hr>
Bullet Charts: `geom_col()` and/or `geom_segment()`

<hr>

![Figure from Boles (in preparation)](KBoles_Figure1_BulletPlot.png)

# Looking Ahead

## Looking Ahead
<hr>
- Readings:
    - Read Holder (2024)
        - Discussion Post
    - Skim Schwabish (2021), Ch. 6
    - Read Wilke (2019), Chs. 7,9,12
- Weekly Assignment
    - Creating and Improving Plots of Amounts
    