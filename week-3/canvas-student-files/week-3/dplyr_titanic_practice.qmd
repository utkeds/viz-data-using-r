---
title: "{dplyr} Titanic Practice"
author: "Fabulous Student"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
execute:
    warning: false
    message: false
---

## Instructions

- Put all team member names in the author YAML field above
- Answer the following questions using the `Titanic-Dataset.csv` dataset
- Run each code chunk and make sure the code block runs without errors as you go
- Think carefully about which chunks to assign, either to an existing object or a new one

#### 1. Load Packages
The {tidyverse} package should already be installed on your machine. Now, load {tidyverse} in the code chunk below.

```{r load_packages}

```


#### 2. Load Data
Read in the Titanic data from the `Titanic-Dataset.csv` file. It is in the zip file you downloaded. Use the `read_csv()` function from {tidyverse}.

```{r load_data}

```

In the [Estrellado reading](https://datascienceineducation.com/c06) from Week 2, the authors introduced the `clean_names()` function from the `janitor` package. We used this function during the {palmerpenguins} scavenger hunt, too. Use this function to clean the variable names in the dataset. Hint: It's good practice to load all packages at the beginning of your script (i.e. go back and load {janitor} with tidyverse). In the code chunk below, use the `clean_names()` function to clean the variable names. Should you store the cleaned dataset to a new name/object?

#### 3. Clean Variable Names
```{r clean_names}

```

Open the [codebook for the `titanic` dataset](https://www.kaggle.com/c/titanic/data) Then, in the
code block below, use `glimpse()` to preview the dataset. You may also want to use str() to see more about its structure, or use describe() from the {psych} package. After reviewing the dataset, answer the following question.

```{r glimpse}

```

**QUESTION:** How many columns/variables are in the dataset?

**ANSWER:** [Please write response here.]

#### 4. Dropping Unused Variables

Next, let's drop the variables that are not of use to us in this analysis. Drop the `PassengerId`, as it's a duplicate of the row number, anyway. After dropping the variable, use `glimpse()` to confirm that the variable was dropped. How many columns/variables are in the dataset now?

```{r drop_passengerid}

```

**ANSWER:** [Please write response here.]

#### 5. Renaming Variables

Now, let's rename a variable name to make it more clear. Rename the `pclass` variable to `class`.

```{r rename_pclass}

```

#### 6. Working with Missing Data

For many of the passengers, we have their age. How many passengers DO NOT have a known age? After running the needed code, please write your answer here.

```{r count_na_age}

```

**ANSWER:** [Please write response here.]

#### 7. Creating New Variables Based on Existinq Variable(s)

Let's create a new variable called `family_size` that is the sum of the `sib_sp` and `parch` variables. This will give us the total number of family members on board for each passenger.

```{r create_family_size}

```

#### 8A. Creating New Variables Based on Condition(s) of Existinq Variable(s)

Let's create a new variable called `age_group` that has a value of "child" if the passenger is under 13 years old, "teen" if the passenger is 13-18 (not including 18), and "adult" if 18 or over. 

```{r create_age_group}

```


#### 8B. Creating New Variables Based on Condition(s) of Existinq Variable(s)

Let us create a third and final variable called `famsize_group` that categorizes the `family_size` variable into three groups: "single" if the passenger has no family members on board, "small" if the passenger has 1-3 family members on board, and "large" if the passenger has 4 or more family members on board.

```{r create_famsize_group}

```

#### 9. Checking New Variables for Errors

Creating a new variable based on conditions of an existing variable can be tricky, even for experienced R users. Let's check the two new variables created in Question 8 to make sure our code caught all the cases as we intended. This is good opportunity to use `distinct()` to see how many unique values each variable has. Any surprises?

```{r check_new_variables}

```

#### 10. Grouping and Summarizing

Group and summarize the data to find the average survival rate by `class` and `age_group`. Also, count the number of people in each group. What is the survival rate for children in first class? How does it compare to other groups? 

NOTE: You may wish to save this output to a new object to reference later - maybe something like `surv_rates_age_class`.

```{r surv_rates_age_class}

```

**ANSWER:** [Please write response here.]

#### 11. Dropping NA Rows

Let's drop the `NA` rows for `age_group` from the last output.

```{r drop_na_age_group}

```

#### 12. Arranging Data

Finally, let's arrange the data by survival rate in descending order. This will allow us to see which groups had the highest survival rates.

```{r arrange_survival_rate}

```

Each person should render this file as an .html and upload it to Canvas.