---
subtitle: "Data Wrangling"
title: "Week 3 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r setup, include=FALSE}
library(tidyverse, palmerpenguins)

```

# Weekly Check In

## Download .zip
<hr>
- In Canvas download the week-3.zip file and move into the folder with your `.Rproj`

# Start Recording

## Today's Agenda {.smaller}
<hr>

- Weekly Check In / .zip Download
- Additional Foundational Skills
    - Other File Types
    - Documentation / Help
    - Troubleshooting Errors
- Reviewing {dplyr} Basics
- More {dplyr}
    - Collaborative Work
- {forcats}
- Looking Ahead


## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Additional Foundational Skills

## Reading Documentation
<hr>
 - `?function_name` or `help(function_name)` will pull documentation
 - Can also access on web (Google is your friend!)

## Other File Types
<hr>
:::{.compact-font}
- Ability to read in a data file is critical\
<br>
- Often, data is stored in a `.csv` file
    - `read_csv()` function in `readr` package (part of [tidyverse core](https://www.tidyverse.org/packages/#core-tidyverse))
<br>  
- Sometimes we have an Excel file
    - `read_excel()` function in `readxl` package
<br>   
- Sometimes we have an SPSS file
    - `read_spss()` in `haven` package
<br>    
- Other times we have a Stata file
    - `read_dta()` in `haven` package
<br>    
- Other file types are possible, but these are the most common
- If you have another - google how to read it in!

:::

## Troubleshooting Errors {.smaller}
<hr>
- **Demo**
    - Follow along with `Troubleshooting_Errors_Demo.Rmd`:
      - Address setup block
      - Reading in an Excel file
      - Three types of errors <!-- (forget to load package, file in wrong place, don't store/assign it and call it later) -->
      - Accessing via file pane > Import Dataset
      
# Reviewing {dplyr} Basics

## {dplyr} Review +
<hr>
- Using two datasets
  - full starwars
  - starwars_a (first five rows of starwars)

## {dplyr} Review +
<hr>
`select()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r include=FALSE}
starwars_a <- starwars |>
  slice(1:5) |>
  select(1:5)
```

```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`select()`

[- Use this to **select columns/variables**]{.extra-small-font}
<br>

:::::{.smaller-font}
```{r echo=TRUE, eval=TRUE}
starwars_a |>
  select(name, height)
```
:::::

::::
:::

## {dplyr} Review +
<hr>
`select()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r include=FALSE}
starwars_a <- starwars |>
  slice(1:5) |>
  select(1:5)
```

```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`select()`

[- Can also **drop columns/variables**]{.extra-small-font}
<br>

:::::{.smaller-font}
```{r echo=TRUE, eval=TRUE}
starwars_a |>
  select(-hair_color)
```
:::::

::::
:::

## {dplyr} Review +
<hr>
`slice()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r include=FALSE}
starwars_a <- starwars |>
  slice(1:5) |>
  select(1:5)
```

```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`slice()`

[- Use this to **select rows/observations**]{.extra-small-font}
<br>

:::::{.smaller-font}
```{r echo=TRUE, eval=TRUE}
starwars_a |>
  slice(3:5)
```
:::::

::::
:::


## {dplyr} Review +
<hr>
`slice()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>

```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`slice()`

[- Can also **drop rows/observations**]{.extra-small-font}
<br>

:::::{.smaller-font}
```{r echo=TRUE, eval=TRUE}
starwars_a |>
  slice(-1,-2)
```
:::::

::::
:::

## {dplyr} Review +
<hr>
`filter()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`filter()`

[- Use this to **filter rows**]{.extra-small-font}
<br>

:::::{.smaller-font}
```{r}
starwars_a |>
  filter(hair_color == "brown")
```
:::::
::::
:::

## {dplyr} Review +
<hr>
`filter()` and `!is.na()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`filter()`

:::{.extra-small-font}
- Use this to **filter rows**
- `!is.na()` filters out all `NA` rows/observations for a given column/variable
:::
<br>

:::::{.smaller-font}
```{r}
starwars_a |>
  filter(!is.na(hair_color))
```
:::::
::::
:::

## {dplyr} Review +
<hr>
`filter()` and `|`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`filter()`

:::{.extra-small-font}
- Use this to **filter rows**
- `|` allows for multiple arguments as condition
- [*How would I change this if I wanted middle heights?*]{.fragment}
  - [`filter(height <= 200 & height >= 100`)]{.fragment}
:::
<br>

:::::{.smaller-font}
```{r}
starwars_a |>
  filter(height > 200 | height < 100)
```
:::::
::::
:::

## {dplyr} Review +
<hr>
`filter()` and `%in%`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`filter()`

:::{.extra-small-font}
- Use this to **filter rows**
- `%in%` allows for multiple arguments as condition (provided as vector)
- `c()` combines into a vector
:::

:::::{.smaller-font}
```{r}
starwars_a |>
  filter(hair_color %in% c("brown", "blond"))
```
:::::
::::
:::

## {dplyr} Review +
<hr>
`rename()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
[`rename(weight = mass)`]{.extra-small-font}

[- Use this to **rename** a column]{.extra-small-font}
<br>

::::{.smaller-font}

```{r}
starwars_a |>
  rename(weight = mass)
```

::::
::::
:::

## {dplyr} Review +
<hr>
`mutate()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`mutate()`

::::{.extra-small-font}
- **Create new variables** from existing ones
- Or **modify** existing variables
::::
<br>

::::{.smaller-font}
```{r eval=F}
starwars_a |>
  mutate(one = height^2,
         two = height*mass,
         hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
::::
::::
:::

## {dplyr} Review +
<hr>
`mutate()` & `case_when()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`mutate()` & `case_when()`

::::{.extra-small-font}
- **Create new variables** from existing ones based on conditions
::::

::::{.extra-small-font}
```{r}
starwars_a |>
  mutate(height_category = case_when(
    height < 150 ~ "short",
    height >= 150 & height < 180 ~ "average",
    height >= 180 ~ "tall"
  ))
```
::::
::::
:::

## {dplyr} Review +
<hr>
`mutate()` & `case_when()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars_a**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars_a |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]" .fragment}
<br>
`mutate()` & `case_when()`

::::{.extra-small-font}
- **Create new variables** from existing ones based on conditions
::::

::::{.extra-small-font}
```{r}
starwars_a |>
  mutate(has_hair = case_when(
    hair_color == "brown" ~ TRUE,
    hair_color == "blond" ~ TRUE,
    TRUE ~ FALSE
  ))
```
::::
::::
:::

# More {dplyr} Functions

## More {dplyr}
<hr>
`count()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}
<br>
`count()`

::::{.extra-small-font}
- **Count** unique values of a variable
::::

::::{.smaller-font}
```{r}
starwars |>
  count(species)
```
::::
::::
:::

## More {dplyr}
<hr>
`count()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}
<br>
`count()`

::::{.extra-small-font}
- **Count** unique values of a variable <br>
- Or for a set of variables
::::

::::{.smaller-font}
```{r}
starwars |>
  count(homeworld,species)
```
::::
::::
:::

## More {dplyr}
<hr>
`group_by()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}
<br>
`group_by()`

::::{.extra-small-font}
- **Group** by a variable and then count
- Here: same as `count()` but in two steps
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(n = n())
```
::::
::::
:::


# Q: If it's an extra step, why use `group_by()`?

# A: You may want to do more than count!

## More {dplyr}
<hr>
`group_by()` & `summarize()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}
<br>
[`group_by()` & `summarize()`]{.smaller-font}

::::{.extra-small-font}
- **Group** by a variable
- With `summarize()` it can do so much more!
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(n = n(),
            proportion = n/nrow(starwars)*100)
```
::::
::::
:::

## More {dplyr}
<hr>
`group_by()` & `summarize()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}
[`group_by()` & `summarize()`]{.smaller-font}

::::{.extra-small-font}
- **group_by()**: groups data by variable(s)
- **summarize()** supports summary statistics for the group [(see summary functions on back of `dplyr` cheatsheet!)]{.blue-font .fragment}
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(mean_height = mean(height, na.rm = TRUE),
            sd_height = sd(height, na.rm = TRUE),
            mean_mass = mean(mass, na.rm = TRUE),
            sd_mass = sd(mass, na.rm = TRUE))
```
::::
::::
:::

## More {dplyr}
<hr>
`group_by()` & `summarize()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}
[`group_by()` & `summarize()`]{.smaller-font}

::::{.extra-small-font}
- **group_by()**: groups data by variable(s)
- **summarize()** supports summary statistics for the group
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(med_height = median(height, na.rm = TRUE),
            IQR_height = IQR(height, na.rm = TRUE),
            med_mass = median(mass, na.rm = TRUE),
            IQR_mass = IQR(mass, na.rm = TRUE))
```
::::
::::
:::

## More {dplyr}
<hr>
`group_by()` & `ungroup()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}

[`group_by()` & `ungroup()`]{.smaller-font}

::::{.extra-small-font}
- When you use `group_by()`, you should also use `ungroup()` when you are finished
- Otherwise, it'll cause you issues later
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(med_height = median(height, na.rm = TRUE),
            IQR_height = IQR(height, na.rm = TRUE),
            med_mass = median(mass, na.rm = TRUE),
            IQR_mass = IQR(mass, na.rm = TRUE))|>
  ungroup()
```
::::
::::
:::

## More {dplyr}
<hr>
`arrange()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}

[`arrange()`]{.smaller-font}

::::{.extra-small-font}
- **Orders**: the rows in ascending order by variable(s)
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(med_height = median(height, na.rm = TRUE),
            IQR_height = IQR(height, na.rm = TRUE),
            med_mass = median(mass, na.rm = TRUE),
            IQR_mass = IQR(mass, na.rm = TRUE))|>
  ungroup()|>
  arrange(med_height)
```
::::
::::
:::

## More {dplyr}
<hr>
`arrange()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  slice(1:10)|>
  select(1:3,10,11)|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
- Note: There are 87 rows in the full `starwars` dataset
::::
::::{layout="[1]" .fragment}

[`arrange()`]{.smaller-font}

::::{.extra-small-font}
- **Orders**: the rows in ascending order by variable(s)
- Adding `desc()` will order in descending order
::::

::::{.smaller-font}
```{r}
starwars |>
  group_by(species)|>
  summarize(med_height = median(height, na.rm = TRUE),
            IQR_height = IQR(height, na.rm = TRUE),
            med_mass = median(mass, na.rm = TRUE),
            IQR_mass = IQR(mass, na.rm = TRUE))|>
  ungroup()|>
  arrange(desc(med_height))
```
::::
::::
:::

# {dplyr} Titanic Practice!

## {dplyr} Titanic Practice (1 of 2)
<hr>
:::{.smaller-font}
- Open your dplyrTitanicPractice-Student.Rmd file.
- We'll go to breakout rooms.
- I will come around and answer questions. This one is more in-depth.
- Resources:
    - Week 2 slides
    - Week 3 slides
    - Beck reading
- Think carefully about object assignment. When should you overwrite an object? When should you create a new one?
- We'll come back to whole group for:
    - {forcats}
    - Looking Ahead
:::

## {dplyr} Titanic Practice (2 of 2) {.smaller}
<hr>
Breakout room structure:

- **Individual Think Time**: ~ 5 min (camera off / mute)
  - Review document
  - Review prompts
  - Start planning possible approaches/pseudocode
- **Introductions**: ~ 3 min (camera on/ unmute)
- **Collaborative Work** (camera on/unmute)

# {forcats} (See cheatsheet)

## {forcats} (factor vars)
<hr>
`fct_relevel()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - Titanic**]{.small-font}
<br>
<br>
```{r echo=FALSE}
titanic <- read_csv("Titanic-Dataset.csv")

surv_rates_age_class <- titanic |>
  mutate(age_group = case_when(
    Age < 13 ~ "child",
    Age >= 13 & Age < 19 ~ "teen",
    Age >=18 ~ "adult")) |>
  group_by(Pclass, age_group)|>
  summarize(
    avg_survival = mean(Survived, na.rm = TRUE),
    n = n()) |>
  ungroup()|>
  filter(!is.na(age_group))|>
  arrange(desc(avg_survival))

surv_rates_age_class$Pclass <- plyr::mapvalues(surv_rates_age_class$Pclass,
                                         from = c(1,2,3),
                                         to = c("First", "Second", "Third"))

surv_rates_age_class <- surv_rates_age_class |>
  mutate(Pclass = fct_relevel(Pclass, "Second", "Third", "First"))

surv_rates_age_class |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>

:::{.extra-small-font}
- X axis lacks order

:::

```{r}
surv_rates_age_class |>
  filter(age_group == "child")|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

## {forcats} (factor vars)
<hr>
`fct_relevel()`
<br>
<hr>

:::{layout="[40,60]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[`fct_relevel()`]{.small-font}

::::{.extra-small-font}
- **Re-orders factors by hand**: you manually specify the order
::::
```{r, eval=FALSE}
surv_rates_age_class |>
  filter(age_group == "child")|>
  mutate(Pclass = fct_relevel(Pclass, "First", "Second", "Third"))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>
```{r, echo=FALSE}
surv_rates_age_class|>
  filter(age_group == "child")|>
  mutate(Pclass = fct_relevel(Pclass, "First", "Second", "Third"))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

## {forcats} (factor vars)
<hr>
`fct_reorder()`
<br>
<hr>

:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[**Example data - Titanic**]{.small-font}
<br>
<br>
```{r echo=FALSE}
surv_rates_age_class|>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>

:::{.extra-small-font}
- What if I wanted this reordered by rate, not class?

:::

```{r}
surv_rates_age_class|>
  filter(age_group == "child")|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

## {forcats} (factor vars)
<hr>
`fct_reorder()`
<br>
<hr>

:::{layout="[40,60]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
[`fct_reorder()`]{.small-font}

::::{.extra-small-font}
- **Re-orders factors by values of another variable**
::::
```{r, eval=FALSE}
surv_rates_age_class|>
  filter(age_group == "child")|>
  mutate(Pclass = fct_reorder(Pclass, avg_survival))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```

::::
::::{layout="[1]" .fragment .smaller-font}
<br>
```{r, echo=FALSE}
surv_rates_age_class|>
  filter(age_group == "child")|>
  mutate(Pclass = fct_reorder(Pclass, desc(avg_survival)))|>
  ggplot(aes(x=Pclass, y=avg_survival)) +
  geom_col(fill="#489FDF") +
  labs(title = "Survival Rates by Class for Children",
       x = "Class",
       y = "Survival Rate")
```
::::
:::

# Looking Ahead

## Looking Ahead
<hr>
- Week 3 Assignment:
    - Gapminder Data
- Reading:
    - Read Healy (2012), Chapter 3
    - Intro to ggplot2
    - Skim ggplot2 cheatsheet
