---
subtitle: "Intro to {ggplot2}"
title: "Week 4 - STEM 691"
author: "Dr. Kelly Boles & Dr. Zhen Xu"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: slides_images/UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r setup, include=FALSE, echo=FALSE}
library(tidyverse)
library(tidykids)

titanic <- read_csv("Titanic-Dataset.csv") |>
  janitor::clean_names()

tidykids <- tidykids |>
  mutate(region = case_when(
    state %in% c("Maine", "New Hampshire", "Vermont", "Massachusetts", "Rhode Island", 
                 "Connecticut", "New York", "New Jersey", "Pennsylvania") ~ "Northeast",
    state %in% c("Ohio", "Indiana", "Illinois", "Michigan", "Wisconsin", "Minnesota",
                 "Iowa", "Missouri", "North Dakota", "South Dakota", "Nebraska", "Kansas") ~ "Midwest",
    state %in% c("Delaware", "Maryland", "Virginia", "West Virginia", "North Carolina", 
                 "South Carolina", "Georgia", "Florida", "Kentucky", "Tennessee", 
                 "Alabama", "Mississippi", "Arkansas", "Louisiana", "Oklahoma", "Texas", "District of Columbia") ~ "South",
    state %in% c("Montana", "Idaho", "Wyoming", "Colorado", "New Mexico", "Arizona", 
                 "Utah", "Nevada", "California", "Oregon", "Washington", "Hawaii", "Alaska") ~ "West"
  ))|>
  janitor::clean_names()
```

# Weekly Check In, Download `.zip`, Download Slides

# Start Recording

## Today's Agenda
<hr>

:::{.smaller-font}
- Weekly Check In
- Additional Foundational Skills
    - Strategies for Object Assignment
    - {forcats} from Week 3
    <!-- - Accessing data from Google Drive/ OneDrive -->
- Reviewing {dplyr} (Collaborative)
    - Intro to tidykids data
- {ggplot2}: a Theoretical Intro
- {ggplot2}: a Practical Intro
    - *If time allows*
- Looking Ahead

:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Additional Foundational Skills


## Logical Operators {.smaller}
<hr>
1. **`!`** (not)
2. **`|`** (or)
![](slides_images/or_num_line.png)

## Logical Operators {.smaller}
<hr>
3. **`&`** (and)
![](slides_images/and_num_line.png)


## Differences Between the Pipe `|>` and the Assignment Operator `<-` {.smaller}
<hr>
- The pipe `|>` is used to chain functions together

:::{.columns}

:::{.column .extra-small-font}
**Original Way**

- The data is the first argument of every function, which get called separately
```{r}
step_1 <-select(starwars, name, species, height)

step_2 <- filter(step_1, species == "Droid")

step_3 <- summarize(step_2, mean_height = mean(height, na.rm=TRUE))
step_3
```

:::

:::{.column .extra-small-font}
**With Pipe**

- The pipe feeds your data through a series of functions in one call

```{r}
combined <- starwars |>
   select(name, species, height) |>
   filter(species == "Droid") |>
   summarize(mean_height = mean(height, na.rm=TRUE))

combined
```

:::

:::

## Breakout Room Discussion {.smaller}
<hr>
**Discussion Prompts**

- What are the pros/cons of creating a new object?

- When assigning... when might you...
  - ...create a new object?
  - ...overwrite an existing object?

## Strategies for Assignment
<hr>
- Examples of when to **overwrite**:
  - Cleaning a dataset

```{r cleaning-titanic}
titanic <- titanic |>
  janitor::clean_names()
```


## Strategies for Assignment
<hr>
- Examples of when to **overwrite**:
  - Deleting a variable I won't need

```{r deleting-passenger_id}
titanic <- titanic |>
  select(-passenger_id)
```

## Strategies for Assignment
<hr>
- Examples of when to **overwrite**:
  - Creating a new variable

```{r creating age_group}
titanic <- titanic |>
  mutate(age_group = case_when(
    age < 13 ~ "child",
    age >= 13 & age < 18 ~ "teen",
    age >= 18 ~ "adult"
  ))
```


## Strategies for Assignment
<hr>
- Examples of when to **create a new object**:
  - Creating a subset of the data

```{r titanic_subset}
titanic_children <- titanic |>
  filter(age < 13)
```


## Strategies for Assignment
<hr>
- Examples of when to **create a new object**:
  - Grouping by/summarizing data

```{r titanic_summary}
titanic_ageclass_summary <- titanic |>
  group_by(pclass) |>
  summarize(mean_age = mean(age, na.rm = TRUE)) |>
  ungroup()
```

<br>

:::{.smaller-font}
```{r print_titanic_summary, echo=FALSE}
titanic_ageclass_summary |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
:::

# {forcats} from [Wk 3 slides](https://utkeds.github.io/viz-data-using-r/week-3/slides.html#/forcats-see-cheatsheet)

<!-- ## Using GSuite / OneDrive with R -->
<!-- <hr> -->

<!-- :::{.small-font} -->
<!-- - I use [Google Drive](https://support.google.com/drive/answer/10838124?hl=en#) / [OneDrive for Desktop](https://www.microsoft.com/en-us/microsoft-365/onedrive/download) -->
<!--     - Interact locally, syncs to cloud -->
<!--     - Probably easiest for most use cases -->
<!-- <!-- - If you want to pull Google Sheets directly from Drive: --> 
<!-- <!--     - [`googlesheets4` package](https://github.com/tidyverse/googlesheets4) --> 
<!-- <!-- - If you want to pull multiple file types from Drive: --> 
<!-- <!--     - [`googledrive` package](https://googledrive.tidyverse.org/) --> 
<!-- <!-- - If you want to pull directly from OneDrive: --> 
<!-- <!--     - [`Microsoft365R` package](https://github.com/Azure/Microsoft365R) --> 
<!-- ::: -->

# Reviewing {dplyr}

## {ggplot2} prework: Data Wrangling
<hr>
- Before you can visualize data, you need to have it in the right format.
- Let's review some {dplyr} functions using the `tidykids` dataset.
  - New data we'll use for a few weeks
- In your `.zip` file, you have a `ggplot2-prework-data-wrangling.qmd` file. Open it.
  - We'll work through it together.

## {ggplot2} prework: Data Wrangling
<hr>
:::{.smaller-font}
- We'll need to review the `tidykids` [codebook](https://jrosen48.github.io/tidykids/articles/tidykids-codebook.html).
- Region code is available in Canvas module (Week 4/During Class)
<br><br><br>
Breakout room structure:

- **Individual Think Time**: ~ 3 min (camera off / mute)
  - Review document
  - Review prompts
  - Start planning possible approaches/pseudocode
- **Introductions**: ~ 3 min (camera on/ unmute)
- **Collaborative Work** (camera on/unmute)

<!-- Questions (please be prepared to share code in Slack):
1. How many variables? 
2. What does each variable represent? In what units?
3. Example: You are only interested in the data from 2016. How would you filter for this?
4. Example: You want to create a new variable that groups states by region. How would you do this?
5. Example: You want to summarize (mean, sd) `inf_adj_perchild` by region. How would I do this?
6. Example: You are only interested in library expenditures. How would you filter for this? -->
:::

# Theoretical Approach to {ggplot2}

## Grammar of Graphics
<hr>

:::{layout="[2,1]" .small-font}
:::{column}
- `ggplot2` is a package in the core `tidyverse` that allows you to create visualizations using the **Grammar of Graphics**.[^1]

- Built by Hadley Wickham (Chief Data Scientist at Posit). He also wrote the `ggplot2` book.
:::

:::{column}
![](slides_images/ggplot2-book.png)
:::
:::
[^1]: Wilkinson, L. (2005). The Grammar of Graphics. Springer Science & Business Media.


## Grammar of Graphics
<hr>

::::{layout="[1,1]" .smaller-font}
:::{column}
- The Grammar of Graphics is a system for understanding how to create visualizations by breaking them down into components.
    - *grammar*: a particular analysis of the system and structure of language or of a specific language
- There are eight components in ggplot's grammar.
:::

:::{column}
<br>
<br>
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Theme.png)
:::
::::

## Grammar of Graphics
<hr>

::::{layout="[1,1]" .smaller-font}
:::{column}
- In English, the minimum components needed to create a sentence are:
    - Subject (at least implied)
    - Verb
:::

:::{column}
- In `ggplot2`, the minimum components needed to create a visualization are:
    - Data
    - Aesthetics
    - Geometries
<br>
<br>
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Geometries.png)
:::
::::

## Grammar of Graphics
<hr>
- In many ways, `ggplot2` functions similarly to image editing software.
    - Both work on the principle of layering.
![](slides_images/PhotoEditor-Layers.png){width=70%}

## Grammar of Graphics
<hr>
:::{layout="[1,2]" .smaller-font}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Data.png){width=300}
:::

:::{column}
```{.r code-line-numbers="|1,5"}
p <- tidykids |>
  filter(year == 2016,
         variable == "PK12ed") |>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot()
```
<br>
Output:
```{r piped ggplot2 call, echo=F}
p <- tidykids |>
  filter(year == 2016,
         expenditure == "PK12ed") |>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot()

p
```
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]" .smaller-font}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Aesthetics.png){width=300}
:::

:::{column}

```{.r code-line-numbers="|5"}
p <- tidykids |>
  filter(year == 2016,
         variable == "PK12ed") |>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region))
  
p
```
<br>
Output:
```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
         expenditure == "PK12ed") |>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region))

p
```
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]" .smaller-font}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
    - [`geom`etric objects to use on plot]{.geometries-color}
:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Geometries.png){width=300}
:::

:::{column}

```{.r code-line-numbers="|6"}
p <- tidykids |>
  filter(year == 2016,
  variable == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point()
  
p
```
Output:
```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
  expenditure == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point()

p
```
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]"}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
    - [`geom`etric objects to use on plot]{.geometries-color}
    - [`scale` to adjust axes, colors, etc.]{.scales-color}

:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Scales.png){width=300}
:::

:::{column}
:::{.smaller-font}
```{.r code-line-numbers="|7"}
p <- tidykids |>
  filter(year == 2016,
  variable == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format())
  
p
```
Output:
```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
  expenditure == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format())

p
```
:::
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]"}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
    - [`geom`etric objects to use on plot]{.geometries-color}
    - [`scale` to adjust axes, colors, etc.]{.scales-color}
    - [`facets` to group into subplots]{.facets-color}

:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Facets.png){width=300}
:::

:::{column}
:::{.smaller-font}
```{.r code-line-numbers="|8"}
p <- tidykids |>
  filter(year == 2016,
  variable == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region)
  
p
```
Output:
```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
  expenditure == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region)

p
```
:::
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]"}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
    - [`geom`etric objects to use on plot]{.geometries-color}
    - [`scale` to adjust axes, colors, etc.]{.scales-color}
    - [`facets` to group into subplots]{.facets-color}
    - [`coord`inates adjust coordinate system]{.coordinates-color}

:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Coordinates.png){width=300}
:::

:::{column}
:::{.smaller-font}
```{.r code-line-numbers="|9"}
p <- tidykids |>
  filter(year == 2016,
  variable == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region) +
  coord_flip()
  
p
```

```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
  expenditure == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region) +
  coord_flip()

p
```
:::
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]"}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
    - [`geom`etric objects to use on plot]{.geometries-color}
    - [`scale` to adjust axes, colors, etc.]{.scales-color}
    - [`facets` to group into subplots]{.facets-color}
    - [`coord`inates adjust coordinate system]{.coordinates-color}
    - [`labs` (labels) to add titles, labels, etc.]{.labels-color}

:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Labels.png){width=300}
:::

:::{column}
:::{.smaller-font}
```{.r code-line-numbers="|10-12"}
p <- tidykids |>
  filter(year == 2016,
  variable == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region) +
  coord_flip() +
  labs(title = "Per Pupil Spending by State",
       x = "Per Pupil Spending in 2016 Dollars (Adjusted for Inflation)",
       y = "State")
p
```

```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
  expenditure == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region) +
  coord_flip() +
  labs(title = "Per Pupil Spending by State",
       x = "Per Pupil Spending in 2016 Dollars (In $1000s)",
       y = "State")
p
```
:::
:::
:::

## Grammar of Graphics
<hr>
:::{layout="[1,2]"}
:::{column}
:::{.extra-small-font}
- Building an example plot using `tidykids`:
    - [`data` to be used]{.data-color}
    - [`aes`thetic mapping from data to visual]{.aesthetics-color}
    - [`geom`etric objects to use on plot]{.geometries-color}
    - [`scale` to adjust axes, colors, etc.]{.scales-color}
    - [`facets` to group into subplots]{.facets-color}
    - [`coord`inates adjust coordinate system]{.coordinates-color}
    - [`labs` (labels) to add titles, labels, etc.]{.labels-color}
    - [`theme` to adjust overall appearance ]{.theme-color}[(built-in)](https://ggplot2.tidyverse.org/reference/ggtheme.html)
:::
![](slides_images/GrammarOfGraphicsViz/GrammarOfGraphics-Theme.png){width=300}
:::

:::{column}
:::{.extra-small-font}
```{.r code-line-numbers="|13-15"}
p <- tidykids |>
  filter(year == 2016,
  variable == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region) +
  coord_flip() +
  labs(title = "Per Pupil Spending by State",
       x = "Per Pupil Spending in 2016 Dollars (Adjusted for Inflation)",
       y = "State")+
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 5, angle = 90, hjust = 1))
        
p
```

```{r, echo=F}
p <- tidykids |>
  filter(year == 2016,
  expenditure == "PK12ed")|>
  mutate(state = state.abb[match(state, state.name)]) |>
  ggplot(aes(x = inf_adj_perchild, y = state, color = region)) +
  geom_point() +
  scale_x_continuous(labels = scales::dollar_format()) +
  facet_wrap(~region) +
  coord_flip() +
  labs(title = "Per Pupil Spending by State",
       x = "Per Pupil Spending in 2016 Dollars (In $1000s)",
       y = "State")+
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 5, angle = 90, hjust = 1))
p
```
:::
:::
:::

## Grammar of Graphics
<hr>
- So, at a high level, there are three steps to creating a `ggplot2` visualization:
    1. [**Data**]{.data-color}: Specify what data you want to visualize, 
    2. [**Aesthetics**]{.aesthetics-color}: which relationships you want to visualize, and
    3. [**Geometries**]{.geometries-color}: how you want the relationships to appear.
- Other layers/components as needed

## A Word on Geometries
<hr>
- The `ggplot2` [cheatsheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf) helps to understand the different `geom`etries available.
    - One Variable: Continuous
    - One Variable: Discrete
    - Two Variables: Both Continuous
    - Two Variables: Both Discrete
    - Two Variables: One Continuous, One Discrete
    - etc.
    
## A Word on Geometries
<hr>
:::{.extra-small-font}
- The most common geometries used generally are:
    - Line Segments:
        - `geom_abline()`: y = ax + b line
        - `geom_vline()`: Vertical line
        - `geom_hline()`: Horizontal line
    - One Variable: Continuous
        - `geom_histogram()`: Histogram
    - Two Variables: Both Continuous
        - `geom_point()`: Scatterplot (often with `geom_smooth()` or `geom_abline()` added)
        - `geom_smooth()`: Smoother
    - Two Variables: One Discrete, One Continuous
        - `geom_col()`: Barplot + `geom_errorbar()`: Error bars
        - `geom_boxplot()`: Boxplot
        - `geom_violin()`: Violin plot
    - Continuous Function
        - `geom_line()`: Line plot
:::    
    
# Practical Approach to {ggplot2}

## Example 1
<hr>
:::{.smaller-font}
[**RQ**]{.regalia-color}

- How do U.S. regions compare in their average inflation-adjusted per-child spending on public K-12 education in 2016? 
    - How do the regions compare to the national average?

:::{.fragment}

[**My Thinking:**]{.regalia-color}  

1. Draw a quick sketch of the graph I want to create.
2. Identify the `geoms`(look at their documentation if needed)
3. Identify the `data`/data wrangling needed.
:::
:::

## Example 1: Pre-work
<hr>
- [**Step 1:** My Sketch]{.smaller-font}

:::{layout="[1,1]" .smaller-font}
:::{column}
![](slides_images/practical_approach/excalidraw_sketch.png)

:::


:::

## Example 1: Pre-work
<hr>

:::{layout="[1,1]" .smaller-font}
:::{column}
![](slides_images/practical_approach/excalidraw_sketch.png)

- **Step 2:** Which geoms? [(see cheatsheet)](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)
    
:::

:::

## Example 1: Pre-work
<hr>

:::{layout="[1,1]" .smaller-font}
:::{column}
![](slides_images/practical_approach/excalidraw_sketch_cols.png){height=70%}

- **Step 2:** Which geoms? [(see cheatsheet)](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)
    - [geom_col()]{.scales-color}
    
:::

:::

## Example 1: Pre-work
<hr>

:::{layout="[1,1]" .smaller-font}
:::{column}
![](slides_images/practical_approach/excalidraw_sketch_hline.png){height=70%}

- **Step 2:** Which geoms? [(see cheatsheet)](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)
    - geom_col()
    - [geom_hline()]{.switchgrass-color}
:::

:::

## Example 1: Pre-work
<hr>

:::{layout="[1,1]" .smaller-font}
:::{column}
![](slides_images/practical_approach/excalidraw_sketch.png)

- Which geoms?
    - geom_col()
    - geom_hline()
:::

:::{column}
- **Step 3:** What variables/data wrangling do I need?
  
  **Breakout Rooms**

:::
:::

# Breakout Rooms

## Example 1: Pre-work
<hr>

:::{layout="[1,1]" .smaller-font}
:::{column}
![](slides_images/practical_approach/excalidraw_sketch.png)

- Which geoms?
    - geom_col()
    - geom_hline()
:::

:::{column}
- **Step 3:** What variables/data wrangling do I need?
    1. Create a `region` variable
    2. Filter for 2016
    3. Filter for `PK12ed`
    4. Calculate national mean (separate from tibble)
    5. Group by `region`
        - Summarize:
            - mean
:::
:::

# Walkthrough Available for Viewing (after class)

<!-- ## Example 2: Your Turn! -->
<!-- <hr> -->
<!-- [**RQ**]{.regalia-color} -->

<!-- :::{.smaller-font} -->
<!-- - What is the *distribution* of inflation-adjusted per-child spending on libraries across *each* U.S. region in 2016? -->
<!--     - How do the regional distributions compare to the national mean? -->
<!-- ::: -->

<!-- [**Breakout Rooms/Posit Cloud**]{.regalia-color} -->

# Looking Ahead

## Looking Ahead{.smaller}
<hr>
- Week 4 Assignment:
    - Wrangling & Graphing
- Reading:
    - **Skim** Knaflic Intro
    - **Read** Knaflic Chapter 1 (Same pdf)
    - **Skim** Schwabish (see all the different types of graphs)
    - **Read** Wilke Chapter 6
    - Discussion Post

