---
subtitle: "Tables in {gt}"
title: "Week 11 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r, echo=F}
library(tidyverse)
```

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.smaller-font}
- **Weekly Check In**
- **Tables in {gt}**
    - What can you do with {gt}?
    - How do you use {gt}? 
- **Collaborative Practice**
- **Looking Ahead**
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Revisiting Last Week

## alt tags in .Rmd {.smaller}
<hr>
- Last week, there was a question about creating alt tags in an .Rmd file
- This is *optional* for your final project.
- When you create your code chunk, you can add an alt tag there
![](Rmd_alt_text.png)

## Setting up knitr chunk options {.smaller}
<hr>
- I kept noticing some strange behavior even when you set `message=F` and `warning=F` in the knitr options
- Solution: Do not set the knitr options in the same block where you are loading the packages
- Instead, set the options first, then load the packages in a second code chunk
![](do_not_do_this.png)


## Tables in R{.smaller}
<hr>
- Tables have historically been considered a weaker point in R.

- There are several packages that have been developed to address this issue:

  - [knitr::kable](https://cran.r-project.org/web/packages/knitr/knitr.pdf#page=29.08) (very basic)
  - [{kableExtra}](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) (builds on knitr::kable)
  - [{flextable}](https://ardata-fr.github.io/flextable-book/) (more advanced, ideal for Word)
  - [{stargazer}](https://cran.r-project.org/web/packages/stargazer/stargazer.pdf) (works directly with regression models)
  - [{gt}](https://gt.rstudio.com/) (a newer package we'll focus on today)

## Preparing to Make a Table{.smaller}
<hr>
- Wrangle your data into how you want it to appear in your table:
  - e.g., If you want summaries, `group_by()` and `summarize()`
  - e.g., If you only want certain columns, `select()`
  - e.g., If you only want certain rows, `filter()` or `slice()`
- Unique considerations:
  - If you have specific row names, make sure there is a variable/column for them
    - (e.g., Subject 1, Subject 2, Subject 3, Subject 4 etc.)
  - If you want to group rows, make sure there is a variable/column for that
    - (e.g., control, treatment)
- When you call/print the tibble or data frame, it should generally look like you want it to look in the table

## Intro to {gt}{.smaller}
<hr>
- {gt} is a package that makes it easy to create tables in R
- It is designed to be easy to use and to produce beautiful tables
- It is also designed to be easy to customize & is built similarly to ggplot2
  - ggplot2 is based on the Grammar of Graphics
  - gt stands for the Grammar of Tables
- Was developed by the RStudio team
- Let's have a <a href="https://utkeds.github.io/viz-data-using-r/week-11/gt_talk_wk11/index.html" target="_blank">preview of what it can do</a>[^1]

[^1]: Note: This only displays correctly in Chrome.

# {gt} Basics (Tutorial 1)

## Intro to {gt}{.smaller}
<hr>
- {gt} has built-in datasets for practice
    - We'll use `exibble` & `gtcars` today
    
```{r}
#install.packages("gt")
library(gt)

exibble
```

## Intro to {gt}{.smaller}
<hr>
- {gt} has built-in datasets for practice
    - We'll use `exibble` & `gtcars` today

```{r}
gtcars
```

# `gt()`

## The `gt()` Function{.smaller}
<hr>
- The `gt()` function is the main function in the {gt} package
- It takes a tibble or data frame as an argument
- Works similarly to ggplot2

:::{layout="[1,1]" .smaller-font}

:::{column}
- Makes a ggplot object (plot)
```r
exibble |>
  ggplot()
```
:::

:::{column}
- Makes a gt object (table)
```r
exibble |>
  gt()
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
This is a preview of all the arguments in the `gt()` function:

``` r
gt(
  data,
  rowname_col = "rowname",
  groupname_col = dplyr::group_vars(data),
  process_md = FALSE,
  caption = NULL,
  rownames_to_stub = FALSE,
  row_group_as_column = FALSE,
  auto_align = TRUE,
  id = NULL,
  locale = NULL,
  row_group.sep = getOption("gt.row_group.sep", " - ")
)
```

## The `gt()` Function{.smaller}
<hr>
- The basic `gt()` table

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/1_Basic_gt_table.png)
:::

:::{column}
```r
exibble |>
  gt()
```

```{r, echo=F}
exibble |>
  gt() |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Let's add a *stub* to the table

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/2_Row_to_stub.png)
- The stub doesn't have a column label. We can add a stubhead label later, if desired.
:::

:::{column}
```r
exibble |>
  gt(rowname_col = "row")
```

```{r, echo=F}
exibble |>
  gt(rowname_col = "row") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Now let's group our rows. To do this, we'll add a *row group label*
- Note that `exibble` has a `group` column

```{r}
exibble
```

## The `gt()` Function{.smaller}
<hr>
- Now let's group our rows. To do this, we'll add a *row group label*

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/3_Row_group_label.png)

:::

:::{column}
```r
exibble |>
  gt(rowname_col = "row",
     groupname_col = "group")
```

```{r, echo=F}
exibble |>
  gt(rowname_col = "row", groupname_col = "group") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Note that we can also use `group_by()` to add *row group labels*

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/3_Row_group_label.png)

:::

:::{column}
```r
exibble |>
  group_by(group) |>
  gt(rowname_col = "row")
```

```{r, echo=F}
exibble |>
  group_by(group) |>
  gt(rowname_col = "row") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Even if the columns are in a weird order, {gt} will still properly group them **in the order they appear**

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/3_Row_group_label.png)

:::

:::{column}
```r
exibble |>
  sample_n(size = 8) |> # Randomly re-orders rows
  gt(rowname_col = "row",
     groupname_col = "group")
```

```{r, echo=F}
exibble |>
  sample_n(size = 8) |>
  gt(rowname_col = "row", groupname_col = "group") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

# `gt_preview()`

## The `gt_preview()` Function{.smaller}
<hr>
- A new function!
- `gt_preview()` helps us preview large gt tables in the viewer pane

``` r
gt_preview(
  data,
  top_n = 5,
  bottom_n = 1,
  incl_rownums = TRUE
)
```

## The `gt_preview()` Function{.smaller}
<hr>
- We'll use the `gtcars` dataset here.
- Note that it has more observations than `exibble`

```{r}
gtcars
```

## The `gt_preview()` Function{.smaller}
<hr>
- Let's select a few variables and preview what `gtcars` would look like in a table

:::{layout="[1,1]" .smaller-font}

:::{column}
<br>
```{r}
gtcars |>
  select(mfr, model, year) |>
  gt_preview()
```
:::

:::{column}
- We can exclude the row numbers:
```{r}
gtcars |>
  select(mfr, model, year) |>
  gt_preview(incl_rownums = FALSE)
```
:::

:::

# `gtsave()`

## The `gt_save()` Function{.smaller}
<hr>
- `gt_save()` helps us save our gt tables to a variety of different file types
    - .html
    - .pdf
    - .png
    - LaTeX
    - .rtf
    - .docx
- similar to `ggsave()` from {ggplot2}

## The `gt_save()` Function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
- We'll create a gt table to then save.

```r
gt_tbl <-
  exibble |>
  gt(
    rowname_col = "row",
    groupname_col = "group"
  )

gt_tbl
```

```{r, echo=F}
gt_tbl <- exibble |>
  gt(rowname_col = "row", groupname_col = "group") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
)
gt_tbl
```

:::

:::{column}
<br><br><br>
[- Write an HTML file.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.html")
```
<br>
[- Get a PNG file by using the .png extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.png")
```
<br>
[- Get a LaTeX file by using the .tex extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.tex")
```
<br>
[- Get a RTF file by using the .rtf extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.rtf")
```
<br>
[- Get a Word file by using the .docx extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.docx")
```
:::

:::

# Adding Additional Features (Tutorial 2)

## The `tab_<something>()` family{.smaller}
<hr>
- The `tab_<something>()` family of functions are used to add components and style tables
    - `tab_header()`
    - `tab_stubhead()`
    - `tab_spanner()`
    - `tab_row_group()`
    - `tab_source_note()`
    - `tab_footnote()`
    - `tab_style()`
    - `tab_options()`
    
<!-- ## {dplyr} functions help select columns{.smaller} -->
<!-- <hr> -->

<!-- - `contains()` -->
<!-- - `matches()` -->
<!-- - `starts_with()` -->
<!-- - `ends_with()` -->
<!-- - `everything()` -->

## Helper functions to style text{.smaller}
<hr>
- `md()`
- `html()`

## Helper functions to indicate table location{.smaller}
<hr>
- We have to specify *where* to add footnotes (`tab_footnote()`) and styling (`tab_style()`)
    - `cells_title()`
    - `cells_stubhead()`
    - `cells_column_spanners()`
    - `cells_column_labels()`
    - `cells_row_groups()`
    - `cells_stub()`
    - `cells_body()`
    - `cells_summary()`
    - `cells_grand_summary()`
    
## Helper functions for defining styles{.smaller}
<hr>

- `cell_text()`
- `cell_fill()`
- `cell_borders()`

# The `tab_<something>()` family of functions

## `tab_header()` function{.smaller}
<hr>

``` r
tab_header(
  data,
  title,
  subtitle = NULL,
  preheader = NULL
)
```

## `tab_header()` function{.smaller}
<hr>
- We can add a title, subtitle, and preheader
- They can be formatted with markdown or HTML

:::{layout="[1,1]" .smaller-font}

:::{column}
```r
gtcars |>
  select(mfr, model, msrp) |>
  slice(1:5) |>
  gt() |>
  tab_header(
    title = md("Data listing from **gtcars**"),
    subtitle = html("<b><span style = 'color:#C6473E;'>gtcars</span></b> is an R dataset")
  )
```

![](teacher/4_Table_header.png)
:::

:::{column}
```{r, echo=F}
gtcars |>
  select(mfr, model, msrp) |>
  slice(1:5) |>
  gt() |>
  tab_header(
    title = md("Data listing from **gtcars**"),
    subtitle = html("<b><span style = 'color:#C6473E;'>gtcars</span></b> is an R dataset")
  )
```
:::

:::

## `tab_stubhead()` function{.smaller}
<hr>
- Adds a column label to the stub

``` r
tab_stubhead(
  data,
  label
)
```

## `tab_stubhead()` function{.smaller}
<hr>
- Adds a column label to the stub

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/4_Table_header.png)
:::

:::{column}
<br>
```{r}
gtcars |>
  select(model, year, hp, trq) |>
  slice(1:5) |>
  gt(rowname_col = "model") |>
  tab_stubhead(label = "car")
```
:::

:::

## `tab_spanner()` function{.smaller}
<hr>
- Adds a column spanner to the table

``` r
tab_spanner(
  data,
  label,
  columns = NULL,
  spanners = NULL,
  level = NULL,
  id = label,
  gather = TRUE,
  replace = FALSE
)
```

## `tab_spanner()` function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/5_Table_spanner.png)
:::

:::{column}
<br>
1. I'm going to make a smaller version of `gtcars` to work with.
```{r}
gtcars_small <- 
  gtcars |>
  dplyr::select(
    -mfr, -trim, bdy_style, drivetrain,
    -drivetrain, -trsmn, -ctry_origin
  ) |>
  dplyr::slice(1:8)

gtcars_small
```
:::

:::

## `tab_spanner()` function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/5_Table_spanner.png)
:::

:::{column}
<br>
2. Let's look at the table in **gt** so that we know where we are starting from.
```{r}
gtcars_small |> gt(rowname_col = "model")
```
:::

:::

## `tab_spanner()` function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/5_Table_spanner.png)
:::

:::{column}
<br>
3. Now I'm going to group all the variables related to car performance under a spanner column with the label `performance`.
```{r}
gtcars_small |>
  gt(rowname_col = "model") |>
  tab_spanner(
    label = "performance",
    columns = c(hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h)
  )
```
:::

:::

## `tab_spanner()` function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/5_Table_spanner.png)
:::

:::{column}
<br>
4. Almost! Now, I want the "hp" column to be the first column in the spanner. The rest of the spanner will travel with it.
```{r}
gtcars_small |>
  dplyr::select(hp, everything()) |> # hp column is relocated
  gt(rowname_col = "model") |>
    tab_spanner(
    label = "performance",
    columns = c(hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h)
  )
```
:::

:::

## `tab_source_note()` function{.smaller}
<hr>
- Adds a source note to the table

``` r
tab_source_note(
  data,
  source_note
)
```

## `tab_source_note()` function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/7_Table_source_notes.png)
:::

:::{column}
- Can add multiple source notes w/ multiple `tab_source_note()` calls
- Can use `md()` or `html()` to format the text
```{r}
exibble |>
  dplyr::slice(1:5) |> #made it shorter for slide
  gt() |>
  tab_source_note(
    source_note = md("The `exibble` dataset is available in the **gt** package.")
  )
```
:::

:::

## `tab_footnote()` function{.smaller}
<hr>
- Adds footnotes to the table
- Two components:
  1. a footnote mark that is attached to the targeted cell text
  2. the footnote text (that starts with the corresponding footnote mark) that is placed in the table's footer area
  
``` r
tab_footnote(
  data,
  footnote,
  locations = NULL,
  placement = c("auto", "right", "left")
)
```
## `tab_footnote()` function{.smaller}
<hr>

:::{layout="[1,1]" .extra-small-font}

:::{column}
![](teacher/7_Table_source_notes.png)

Cell target functions:

::::{.sorta-tiny-font}
- `cells_title()`: target the table title or subtitle
- `cells_stubhead()`: target the table stubhead cell
- `cells_column_spanners()`: target the column spanners
- `cells_column_labels()`: target the column labels
- `cells_row_groups()`: target row groups
- `cells_stub()`: target cells in the table stub
- `cells_body()`: target data cells in the table body
- `cells_summary()`: target group summary cells
- `cells_grand_summary()`: target cells in a grand summary

::::
:::

:::{column}
- Each call of `tab_footnote()` will add a different note, and one or more cells can be targeted via the location helper (use in `locations`)
- Let's add a footnote to the `fctr` column explaining what it is.

```{r}
exibble |>
  dplyr::slice(1:4) |> #made it shorter for slide
  gt() |>
  tab_footnote(
    footnote = "This is a factor column.",
    locations = cells_column_labels(columns = fctr)
  )
```
:::

:::

# Let's make things look nicer! {.smaller}

## `tab_style()` function{.smaller}
<hr>
- Adds custom styling to one or more cells
  - Can specify specific cell styling using:
    - `cell_text()`
    - `cell_fill()`
    - `cell_borders()`
  - And target specific cells using the `cells_*()` functions we just learned.

``` r
tab_style(
  data,
  style,
  locations
)
```
## `tab_style()` function{.smaller}
<hr>

:::{layout="[1,1]" .extra-small-font}

:::{column}
- `cell_text()`
- Let's change all of the text in the body of this table to Times New Roman
```{r}
exibble |>
  dplyr::select(num, currency) |>
  gt()
```
:::

:::{column}
<br>
```{r}
exibble |>
  dplyr::select(num, currency) |>
  gt() |>
  tab_style(
    style = cell_text(font = "Times New Roman"),
    locations = cells_body()
  )
```
:::

:::

## `tab_style()` function{.smaller}
<hr>

:::{layout="[1,1]" .extra-small-font}

:::{column}
- `cell_text()`
- Nah! I'd prefer a Google Font... in **both** body and the `currency` column label (not `num`).
```{r}
exibble |>
  dplyr::select(num, currency) |>
  gt()
```
- Use a font from the Google Fonts service by using the `google_font()` function.
- Recommendations on some Google fonts can be found by using `info_google_fonts()`
:::

:::{column}
```{r}
exibble |>
  dplyr::select(num, currency) |>
  gt() |>
  tab_style(
    style = cell_text(font = google_font("IBM Plex Sans"), weight = 500),
    locations = list(
      cells_body(),
      cells_column_labels(columns = currency)
  ))
```
:::

:::

## `tab_style()` function{.smaller}
<hr>
- `cell_text()` and `cell_fill()`
- Conditional fill colors / font styling by cell

:::{layout="[1,1]" .smaller-font}

:::{column}
```{r, eval=F}
exibble |>
  dplyr::select(num, currency) |>
  gt() |>
  fmt_number(
    columns = c(num, currency),
    decimals = 1
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "cyan"), # Only cyan fill if num is >= 5000
      cell_text(weight = "bold") # Only bold if num is >= 5000
      ),
    locations = cells_body(
      columns = num,
      rows = num >= 5000
    )
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#F9E3D6"), # Only peach fill if currency is < 100
      cell_text(style = "italic") # Only italic if currency is < 100
      ),
    locations = cells_body(
      columns = currency,
      rows = currency < 100
    )
  )
```
:::

:::{column}
```{r, echo=FALSE}
exibble |>
  dplyr::select(num, currency) |>
  gt() |>
  fmt_number(
    columns = c(num, currency),
    decimals = 1
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "cyan"),
      cell_text(weight = "bold")
      ),
    locations = cells_body(
      columns = num,
      rows = num >= 5000
    )
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#F9E3D6"),
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = currency,
      rows = currency < 100
    )
  )
```
:::

:::

## `tab_style()` function{.smaller}
<hr>
- `cell_text()` and `cell_fill()`
- Conditional text and fill colors by row
- New dataset: `sp500` stock market index

:::{layout="[1,1]" .smaller-font}

:::{column}
```{r, eval=F}
sp500 |>
  dplyr::filter(
    date >= "2015-12-01" &
    date <= "2015-12-15"
  ) |>
  dplyr::select(-c(adj_close, volume)) |>
  gt() |>
  tab_style(
    style = cell_fill(color = "lightgreen"),
    locations = cells_body(rows = close > open)
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "tomato"),
      cell_text(color = "white")
      ),
    locations = cells_body(rows = open > close)
  )
```
:::

:::{column}
```{r, echo=FALSE}
sp500 |>
  dplyr::filter(
    date >= "2015-12-01" &
    date <= "2015-12-15"
  ) |>
  dplyr::select(-c(adj_close, volume)) |>
  gt() |>
  tab_style(
    style = cell_fill(color = "lightgreen"),
    locations = cells_body(rows = close > open)
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "tomato"),
      cell_text(color = "white") 
      ),
    locations = cells_body(rows = open > close)
  )
```
:::

:::

## `tab_options()` function{.smaller}
<hr>
- Can modify global options for a table
- Lots of examples follow (many options)

``` r
tab_options(
  data,
  container.width = NULL,
  container.height = NULL,
  container.overflow.x = NULL,
  container.overflow.y = NULL,
  table.width = NULL,
  table.layout = NULL,
  <many more options>
  page.header.height = NULL,
  page.footer.height = NULL,
  quarto.use_bootstrap = NULL,
  quarto.disable_processing = NULL
)
```
## `tab_options()` function{.smaller}
<hr>
- I made a plot with `exibble`. Code is unimportant (hidden).
- Let's make some modifications to it!

```{r, echo = F}
tab_1 <- 
  exibble |>
  dplyr::select(
    -c(fctr, date, time, datetime)
  ) |>
  gt(
    rowname_col = "row",
    groupname_col = "group"
  ) |>
  tab_header(
    title = md("Data listing from **exibble**"),
    subtitle = md("`exibble` is an R dataset")
  ) |>
  fmt_number(columns = num) |>
  fmt_currency(columns = currency) |>
  tab_footnote(
    footnote = "Using commas for separators.",
    locations = cells_body(
      columns = num,
      rows = num > 1000
    )
  ) |>
  tab_footnote(
    footnote = "Using commas for separators.",
    locations = cells_body(
      columns = currency,
      rows = currency > 1000
    )
  ) |>
  tab_footnote(
    footnote = "Alphabetical fruit.",
    locations = cells_column_labels(columns = char)
  )
```

```{r}
tab_1
```

## `tab_options()` function{.smaller}
<hr>
- Modify table width to 100% of the page width
```{r}
tab_1 |>
  tab_options(table.width = pct(100)) # pct() helper function used here
```

## `tab_options()` function{.smaller}
<hr>
- Modify table background color
```{r}
tab_1 |>
  tab_options(table.background.color = "lightcyan")
```

## `tab_options()` function{.smaller}
<hr>
- Use letters (rather than numbers) for the footnotes
```{r}
tab_1 |>
  tab_options(footnotes.marks = letters)
```

## `tab_options()` function{.smaller}
<hr>
- Change the padding of data rows to 5 pixels
```{r}
tab_1 |> 
  tab_options(data_row.padding = px(5)) # px() helper function used here
```

## `tab_options()` function{.smaller}
<hr>
- Reduce size of title and subtitle
```{r}
tab_1 |>
  tab_options(
    heading.title.font.size = px(14),
    heading.subtitle.font.size = px(10)
  )
```

# And so much more...

<!-- ## Codealong{.smaller} -->
<!-- <hr> -->
<!-- - In your .zip file, you will find a folder called `gt_codealong` -->
<!-- - Please open files 01 & 02 in RStudio -->
<!-- - We're going to work through them together! -->

## Collaborative Practice{.smaller}
<hr>
- You have `01_02_Collaborative_Practice.Rmd` in your .zip file
    - All the code is written. Your job is to read the prompts and edit it to build facility with {gt}.
- Launch into breakout rooms.
- Cameras off: 3-5 min to review task
- Cameras on: collaborative task work
- No need to submit this one.
- If you have time remaining:
    - Open 03 and work through it together

<!-- ## Final Project / Wk 14{.smaller} -->
<!-- <hr> -->
<!-- - You will be presenting your final project in Week 14 -->
<!-- - Presentation order will follow the slide order in the Google Slide Deck -->

## More Tutorials {.smaller}
<hr>
- What we did today was taken from file 1 and 2 of the {gt} tutorials
- You have files 3 and 4 in your .zip file with all code written out
   - They cover they `fmt_<something>()` family of functions (file 3) AND
   - Column modification functions (file 4)
- You can run through these and run the code to see how they work!
- Using 1 idea from file 3 is +5 bonus and 1 idea from file 4 is +5 bonus in your homework

If interested, file 5: adding summary rows and file 6: table option functions exist on [github](https://github.com/rich-iannone/gt-workshop).
    
## Looking Ahead{.smaller}
<hr>
- Next week: Mapping!
- Reading:
    - Healy (2018), Chapter 7
    - Muth (2018)
    - Schwabish (2021), Chapter 7
- Assignment: Creating and Styling Tables
  - Due NEXT Wednesday (4/23)
- Mini Project #2
  - Due THIS Wednesday (4/16)

## Attribution for Materials Used Today{.smaller}
<hr>
* Rich Iannone & {gt} team at Posit
* <https://github.com/rstudio/gt>
* License: [MIT License](https://github.com/rstudio/gt/blob/master/LICENSE.md)