---
subtitle: "Tables in {gt}"
title: "Week 11 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r, echo=F}
library(tidyverse)
```

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.smaller-font}
- **Weekly Check In**
- **Tables in {gt}**
    - What can you do with {gt}?
    - How do you use {gt}? 
- **Collaborative Practice**
- **Looking Ahead**
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Revisiting Last Week

## alt tags in .Rmd {.smaller}
<hr>
- Last week, there was a question about creating alt tags in an .Rmd file
- This is *optional* for your final project.
- When you create your code chunk, you can add an alt tag there
![](Rmd_alt_text.png)

## Tables in R{.smaller}
<hr>
- Tables have historically been considered a weaker point in R.

- There are several packages that have been developed to address this issue:

  - [knitr::kable](https://cran.r-project.org/web/packages/knitr/knitr.pdf#page=29.08) (very basic)
  - [{kableExtra}](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) (builds on knitr::kable)
  - [{flextable}](https://ardata-fr.github.io/flextable-book/) (more advanced, ideal for Word)
  - [{stargazer}](https://cran.r-project.org/web/packages/stargazer/stargazer.pdf) (works directly with regression models)
  - [{gt}](https://gt.rstudio.com/) (a newer package we'll focus on today)

## Preparing to Make a Table{.smaller}
<hr>
- Wrangle your data into the data you want to show up in your table:
  - e.g., If you want summaries, `summarize()`
  - e.g., If you only want certain columns, `filter()`
  - If you have specific row names, make sure there is a variable for them
- That is, when you print the tibble or data frame, it should generally look like you want it to look in the table

## Intro to {gt}{.smaller}
<hr>
- {gt} is a package that makes it easy to create tables in R
- It is designed to be easy to use and to produce beautiful tables
- It is also designed to be easy to customize & is built similarly to ggplot2
- Was developed by the RStudio team
- Let's have a <a href="https://utkeds.github.io/viz-data-using-r/week-11/gt_talk_wk11/index.html" target="_blank">preview of what it can do</a>[^1]

[^1]: Note: This only displays correctly in Chrome.

## Intro to {gt}{.smaller}
<hr>
- {gt} has built-in datasets for practice
    - We'll use `exibble` & `gtcars` today
    
```{r}
#install.packages("gt")
library(gt)

exibble
```

## Intro to {gt}{.smaller}
<hr>
- {gt} has built-in datasets for practice
    - We'll use `exibble` & `gtcars` today

```{r}
gtcars
```

# `gt()`

## The `gt()` Function{.smaller}
<hr>
- The `gt()` function is the main function in the {gt} package
- It takes a tibble or data frame as an argument
- Works similarly to ggplot2

:::{layout="[1,1]" .smaller-font}

:::{column}
- Makes a ggplot object (plot)
```r
exibble |>
  ggplot()
```
:::

:::{column}
- Makes a gt object (table)
```r
exibble |>
  gt()
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
This is a preview of all the arguments in the `gt()` function:

``` r
gt(
  data,
  rowname_col = "rowname",
  groupname_col = dplyr::group_vars(data),
  process_md = FALSE,
  caption = NULL,
  rownames_to_stub = FALSE,
  row_group_as_column = FALSE,
  auto_align = TRUE,
  id = NULL,
  locale = NULL,
  row_group.sep = getOption("gt.row_group.sep", " - ")
)
```

## The `gt()` Function{.smaller}
<hr>
- The basic `gt()` table

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/1_Basic_gt_table.png)
:::

:::{column}
```r
exibble |>
  gt()
```

```{r, echo=F}
exibble |>
  gt() |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Let's add a *stub* to the table

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/2_Row_to_stub.png)
- The stub doesn't have a column label. We can add a stubhead label later, if desired.
:::

:::{column}
```r
exibble |>
  gt(rowname_col = "row")
```

```{r, echo=F}
exibble |>
  gt(rowname_col = "row") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Now let's group our rows. To do this, we'll add a *row group label*
- Note that `exibble` has a `group` column

```{r}
exibble
```

## The `gt()` Function{.smaller}
<hr>
- Now let's group our rows. To do this, we'll add a *row group label*

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/3_Row_group_label.png)

:::

:::{column}
```r
exibble |>
  gt(rowname_col = "row",
     groupname_col = "group")
```

```{r, echo=F}
exibble |>
  gt(rowname_col = "row", groupname_col = "group") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Note that we can also use `group_by()` to add *row group labels*

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/3_Row_group_label.png)

:::

:::{column}
```r
exibble |>
  group_by(group) |>
  gt(rowname_col = "row")
```

```{r, echo=F}
exibble |>
  group_by(group) |>
  gt(rowname_col = "row") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

## The `gt()` Function{.smaller}
<hr>
- Even if the columns are in a weird order, {gt} will still properly group them in the order they appear

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/3_Row_group_label.png)

:::

:::{column}
```r
exibble |>
  sample_n(size = 8) |> # Randomly re-orders rows
  gt(rowname_col = "row",
     groupname_col = "group")
```

```{r, echo=F}
exibble |>
  sample_n(size = 8) |>
  gt(rowname_col = "row", groupname_col = "group") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
  )
```
:::

:::

# `gt_preview()`

## The `gt_preview()` Function{.smaller}
<hr>
`gt_preview()` helps us preview large gt tables in the viewer pane

``` r
gt_preview(
  data,
  top_n = 5,
  bottom_n = 1,
  incl_rownums = TRUE
)
```

## The `gt_preview()` Function{.smaller}
<hr>
- We'll use the `gtcars` dataset here.
- Note that it has more observations than `exibble`

```{r}
gtcars
```

## The `gt_preview()` Function{.smaller}
<hr>
- Let's select a few variables and preview what `gtcars` would look like in a table

:::{layout="[1,1]" .smaller-font}

:::{column}
<br>
```{r}
gtcars |>
  select(mfr, model, year) |>
  gt_preview()
```
:::

:::{column}
- We can exclude the row numbers:
```{r}
gtcars |>
  select(mfr, model, year) |>
  gt_preview(incl_rownums = FALSE)
```
:::

:::

# `gtsave()`

## The `gt_save()` Function{.smaller}
<hr>
- `gt_save()` helps us save our gt tables to a variety of different file types
    - .html
    - .pdf
    - .png
    - LaTeX
    - .rtf
    - .docx
    
## The `gt_save()` Function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
- We'll create a gt table to then save.

```r
gt_tbl <-
  exibble |>
  gt(
    rowname_col = "row",
    groupname_col = "group"
  )

gt_tbl
```

```{r, echo=F}
gt_tbl <- exibble |>
  gt(rowname_col = "row", groupname_col = "group") |>
  tab_options(data_row.padding = px(2)) |>
  tab_options(
    table.font.size = "small"
)
gt_tbl
```

:::

:::{column}
<br><br><br>
[- Write an HTML file.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.html", inline_css = FALSE)
```
<br>
[- Get a PNG file by using the .png extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.png")
```
<br>
[- Get an RTF file by using the .rtf extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.rtf")
```
<br>
[- Get a Word file by using the .docx extension.]{.extra-small-font}
```{r, eval=FALSE}
gt_tbl |> gtsave("tab_1.docx")
```
:::

:::

## The `tab_<something>()` family{.smaller}
<hr>
- The `tab_<something>()` family of functions are used to add components and style tables
    - `tab_header()`
    - `tab_stubhead()`
    - `tab_spanner()`
    - `tab_row_group()`
    - `tab_source_note()`
    - `tab_footnote()`
    - `tab_style()`
    - `tab_options()`
    
## {dplyr} functions help select columns{.smaller}
<hr>

- `contains()`
- `matches()`
- `starts_with()`
- `ends_with()`
- `everything()`

## Helper functions to style text{.smaller}
<hr>
- `md()`
- `html()`

## Helper functions to indicate table location{.smaller}
<hr>
- We have to specify *where* to add footnotes (`tab_footnote()`) and styling (`tab_style()`)
    - `cells_title()`
    - `cells_stubhead()`
    - `cells_column_spanners()`
    - `cells_column_labels()`
    - `cells_row_groups()`
    - `cells_stub()`
    - `cells_body()`
    - `cells_summary()`
    - `cells_grand_summary()`
    
## Helper functions for defining styles{.smaller}
<hr>

- `cell_text()`
- `cell_fill()`
- `cell_borders()`

# The `tab_<something>()` family of functions

## `tab_header()` function{.smaller}
<hr>

``` r
tab_header(
  data,
  title,
  subtitle = NULL,
  preheader = NULL
)
```

## `tab_header()` function{.smaller}
<hr>
- We can add a title, subtitle, and preheader
- They can be formatted with markdown or HTML

:::{layout="[1,1]" .smaller-font}

:::{column}
```r
gtcars |>
  select(mfr, model, msrp) |>
  slice(1:5) |>
  gt() |>
  tab_header(
    title = md("Data listing from **gtcars**"),
    subtitle = html("<b><span style = 'color:#C6473E;'>gtcars</span></b> is an R dataset")
  )
```

![](teacher/4_Table_header.png)
:::

:::{column}
```{r, echo=F}
gtcars |>
  select(mfr, model, msrp) |>
  slice(1:5) |>
  gt() |>
  tab_header(
    title = md("Data listing from **gtcars**"),
    subtitle = html("<b><span style = 'color:#C6473E;'>gtcars</span></b> is an R dataset")
  )
```
:::

:::

## `tab_stubhead()` function{.smaller}
<hr>
- Adds a column label to the stub

``` r
tab_stubhead(
  data,
  label
)
```

## `tab_stubhead()` function{.smaller}
<hr>
- Adds a column label to the stub

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/4_Table_header.png)
:::

:::{column}
<br>
```{r}
gtcars |>
  select(model, year, hp, trq) |>
  slice(1:5) |>
  gt(rowname_col = "model") |>
  tab_stubhead(label = "car")
```
:::

:::

## `tab_spanner()` function{.smaller}
<hr>
- Adds a column spanner to the table

``` r
tab_spanner(
  data,
  label,
  columns = NULL,
  spanners = NULL,
  level = NULL,
  id = label,
  gather = TRUE,
  replace = FALSE
)
```

## `tab_spanner()` function{.smaller}
<hr>

:::{layout="[1,1]" .smaller-font}

:::{column}
![](teacher/5_Table_spanner.png)
:::

:::{column}
:::

:::

## Codealong{.smaller}
<hr>
- In your .zip file, you will find a folder called `gt_codealong`
- Please open files 01 & 02 in RStudio
- We're going to work through them together!

## Collaborative Practice{.smaller}
<hr>
- You have `01_02_Collaborative_Practice.Rmd` in your .zip file
    - All the code is written. Your job is to read the prompts and edit it to build facility with {gt}.
- Launch into breakout rooms.
- Cameras off: 3-5 min to review task
- Cameras on: collaborative task work
- No need to submit this one.
- If you have time remaining:
    - Apply other pieces of the 01/02 codealong OR
    - Open 03 and work through it together

## Final Project / Wk 14{.smaller}
<hr>
- You will be presenting your final project in Week 14
- Presentation order will follow the slide order in the Google Slide Deck
    
## Looking Ahead{.smaller}
<hr>
- Reading:
    - Healy (2018), Chapter 7
    - Muth (2018)
    - Schwabish (2021), Chapter 7
- Assignment: Creating and Styling Tables

## Attribution for Materials Used Today{.smaller}
<hr>
* Rich Iannone & {gt} team at Posit
* <https://github.com/rstudio/gt>
* License: [MIT License](https://github.com/rstudio/gt/blob/master/LICENSE.md)