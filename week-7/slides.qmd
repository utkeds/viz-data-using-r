---
subtitle: "Visual Storytelling: Lines and Curves"
title: "Week 7 - STEM 691"
author: "Dr. Kelly Boles & Dr. Zhen Xu"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: slides_images/UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r setup, include=FALSE, echo=FALSE}
library(tidyverse)
# library(tidykids)

tidykids <- read_csv("tidykids.csv") |>
  mutate(region = case_when(
    state %in% c("Maine", "New Hampshire", "Vermont", "Massachusetts", "Rhode Island", 
                 "Connecticut", "New York", "New Jersey", "Pennsylvania") ~ "Northeast",
    state %in% c("Ohio", "Indiana", "Illinois", "Michigan", "Wisconsin", "Minnesota",
                 "Iowa", "Missouri", "North Dakota", "South Dakota", "Nebraska", "Kansas") ~ "Midwest",
    state %in% c("Delaware", "Maryland", "Virginia", "West Virginia", "North Carolina", 
                 "South Carolina", "Georgia", "Florida", "Kentucky", "Tennessee", 
                 "Alabama", "Mississippi", "Arkansas", "Louisiana", "Oklahoma", "Texas", "District of Columbia") ~ "South",
    state %in% c("Montana", "Idaho", "Wyoming", "Colorado", "New Mexico", "Arizona", 
                 "Utah", "Nevada", "California", "Oregon", "Washington", "Hawaii", "Alaska") ~ "West"
  ))|>
  janitor::clean_names()

```

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda {.smaller}
<hr>

:::{.extra-small-font}
- **Weekly Check In**
- **Review/ Foundational Skills**
  - `pivot_wider()`
- **Lines & Curves**
    - *Principles of Line Plots*
    - *Time Series Data*
    - *Multiple Groups*
        <!-- - `gg_highlight` -->
    - *Adding Trendlines*
        - Fitted Lines
        - Smoothers
    - *Miscellaneous Lines*
        <!-- - `geom_vline()` -->
        <!-- - `geom_hline()` -->
        <!-- - `geom_abline()` -->
- **Collaborative Exercise** 
- **Schwabish Extensions**
- **Mini Project #1 Discussion**
- **Looking Ahead**
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Review/ <br>Foundational Skills
 
<!-- ## A Note About Data Wrangling {.smaller}
<hr>

:::{.smaller-font}

```{r, echo=TRUE, fig.height=4}
tidykids |> 
  filter(year >= 2000, region == "Midwest") |> 
  mutate(state = fct_reorder(state, inf_adj_perchild)) |> 
  ggplot(aes(x=inf_adj_perchild, y=state)) +
  geom_col(width = 0.7, fill="pink") +
  scale_x_continuous(labels = scales::dollar) +
  labs(title = "Inflation-Adjusted Per-Child Spending in Midwest States after 2000",
       x = "Inflation-Adjusted Per-Child Spending (in $1000s USD)",
       y = "State") +
  theme_bw()
```
::: -->


# Data Dictionary for U.S. News University Rankings (2020)

## Data Dictionary for University Rankings Data {.smaller}
<hr>
- In the Mini-Project #1 module, a [data dictionary](https://utkeds.github.io/viz-data-using-r/mini-project-1/canvas-student-files/mini-project-1/us_news_data_dictionary.html) was uploaded last week
- One note:

```{r}
rankings <- read_csv("https://raw.githubusercontent.com/utkeds/viz-data-using-r/main/week-6/us-news-rankings-2020-processed.csv")

rankings |>
  select(school, predicted_graduation_rate, actual_graduation_rate, over_underperformance) |>
  head(5)
```

# Pivoting Longer/Wider

## Pivoting Longer/Wider {.smaller}
<hr>

- sometimes your data is in a format different than what you need
- `pivot_longer()` and `pivot_wider()` are your friends
- typically when working in R (esp. {tidyverse}), longer is better
- Today: [`pivot_wider()` - See documentation](https://tidyr.tidyverse.org/reference/pivot_wider.html)


![](slides_images/pivot_wider_malaria.png)

:::{.extra-small-font}
Batra, Neal, et al. (2021). *The Epidemiologist R Handbook*. www.epirhandbook.com/en/
:::

## Pivoting Longer/Wider {.smaller}
<hr>
- How might we pivot our `tidykids` data wider?
  - **Example 1** Scenario: 
    - I want my new columns to be the `expenditure` types
    - I want the values in these columns to be from `inf_adj_perchild`

`original`
```{r}
tidykids <- tidykids|>
  arrange(state, year)
head(tidykids,5)
```

## Pivoting Longer/Wider {.smaller}
<hr>
- How might we pivot our `tidykids` data wider?
  - **Example 1** Scenario: 
    - I want my new columns to be the `expenditure` types
    - I want the values in these columns to be from `inf_adj_perchild`

```{r}
wider_1 <- tidykids|>
  select(-raw, -inf_adj) |>
  pivot_wider(names_from = expenditure, values_from = inf_adj_perchild)

head(wider_1,5)
```


## Pivoting Longer/Wider {.smaller}
<hr>
- Very important to look at the documentation for pivot functions
  - They are robust and will do a lot, but can be confusing
  - [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html)
  - **Example 2: ** - I kept all three `raw`, `inf_adj`, and `inf_adj_perchild` columns
```{r}
wider <- tidykids |>
  pivot_wider(names_from = expenditure, values_from = c(raw, inf_adj, inf_adj_perchild))

head(wider,5)
```


# Lines & Curves

## Improve This
<hr>
- How could we improve this plot?
![](slides_images/no-lines.png)

## Improve This
<hr>
- How could we improve this plot?
![](slides_images/groups.png)

## Principles of Line Plots
<hr>
- Today:
    - Time series data
    - Line plots
    - Area plots
    - Multiple groups
    
## Principles of Line Plots
<hr>
:::{.smaller-font}
1. Connecting lines can visually connect individual data points that have a temporal pattern
    - Note: Temporal variable typically on the x-axis
2. Fitted lines can show the more general trend over time
3. You can add a variety of fitted lines, including linear, quadratic, and smooth lines and curves
4. When you add lines, you don't always need to add points
5. With multiple groups, lines are nearly essential
    - You will need to specify a `group` variable
:::

## Time Series Data
<hr>
:::{.smaller-font}
- We already know some approaches to graphing time series data with `geom_col()` and `geom_point()`
- Some wrangling:
:::

:::{.smaller-font}
```{r}
tidykids_tn <- tidykids |>
  filter(state == "Tennessee",
         expenditure == "PK12ed")
```
:::

:::{.columns .smaller-font}
:::{.column}
<br>
```{r, fig.height=5}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild))+
  geom_col()
```
:::

:::{.column}
<br>
```{r, fig.height=5}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild))+
  geom_point()
```

:::
:::

## Time Series Data
<hr>

- How can we add lines to our `geom_point()` plot?
    - Add a layer and group argument!

:::{.columns .extra-small-font}
:::{.column}
```{r, fig.height=5}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild))+
  geom_point()
```
:::

:::{.column}
```{.r code-line-numbers="|2,3"}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_line()+
  geom_point() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```

```{r, fig.height=3, fig.width=5, echo=FALSE}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_line()+
  geom_point() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```

:::
:::

## Time Series Data
<hr>
- We can also turn this into an area plot!
- Note: Y axis starts at 0!

:::{.columns .extra-small-font}
:::{.column}
```{.r code-line-numbers="|3-4"}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_area()+
  geom_point() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```

```{r, fig.height=5, echo=FALSE}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_area()+
  geom_point() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```
:::

:::{.column}
```{.r code-line-numbers="|3-4"}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_area(alpha=.3)+
  geom_line() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```

```{r, fig.height=5, echo=FALSE}
tidykids_tn |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_area(alpha=.3)+
  geom_line() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```
:::
:::

# Multiple Groups

## Time Series w/ Multiple Groups
<hr>
:::{.smaller-font}
- Time series plots can show multiple groups
- Some wrangling:
::::

:::{.extra-small-font}
```{r}
tidykids_south <- tidykids |>
  filter(state %in% c("Tennessee", "Alabama", "Mississippi", "Arkansas", "Louisiana", "Oklahoma", "Texas", "District of Columbia", "Georgia",
                      "Kentucky", "North Carolina", "South Carolina", "Virginia", "West Virginia"),
         expenditure == "PK12ed")
```
:::

:::{.columns .extra-small-font}
:::{.column}
<br><br>
```{.r code-line-numbers="|2-3"}
tidykids_south |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_line(aes(color=state))+
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```

```{r, fig.height=5, echo=FALSE}
tidykids_south |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_line(aes(color=state))+
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```
:::
:::{.column}
<br>`gghighlight()`<br>
```{.r code-line-numbers="|1,7"}
library(gghighlight)

tidykids_south |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_line(aes(color=state))+
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))+
  gghighlight(state %in% c("Tennessee", "District of Columbia"))
```

```{r, fig.height=5, echo=FALSE}
library(gghighlight)

tidykids_south |>
  ggplot(aes(x=as.factor(year), y=inf_adj_perchild, group = state))+
  geom_line(aes(color=state))+
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))+
  gghighlight(state %in% c("Tennessee", "District of Columbia"))
```
:::
:::

## The {ggplot2} group argument {.smaller}
<hr>
- Notice there is a `group = state` mapping in `aes()`
- Sometimes {ggplot2} can try and guess the `group` variable
  - But it doesn't often work
- **Takeaway**: Always specify a `group` variable
<br><br>
- *Note*: If you forget, you'll often get a zig-zagged line that tries to connect all y for every value of x (a mess!)

```{r, fig.height=5, echo=FALSE}
tidykids_south |>
  ggplot(aes(x=year, y=inf_adj_perchild))+
  geom_line()+
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```

# Lines/Curves for Patterns

## Lines/Curves for Patterns
<hr>
- A critical difference is between *connecting* lines and *fitted* lines, or curves
<br><br>
- **Connecting line**: Connects the points (slide 19 as one of several examples)
- **Fitted lines**: Can take different forms: linear, quadratic, interpolated using fancy math

## Fitted Lines
<hr>
:::{.smaller-font}
- Makes assumptions about the functional form of relationship between variables
- Some wrangling:
:::

:::{.extra-small-font}
```{r}
tidykids_wide <- tidykids |>
  filter(year >= 2010) |>
  select(year,state,expenditure,inf_adj_perchild) |>
  pivot_wider(names_from = expenditure, values_from = inf_adj_perchild)
```
:::

:::{.columns .extra-small-font}
:::{.column}
<br>
Linear Regression
```{r}
tidykids_wide |>
  ggplot(aes(x = highered, y = pell)) +
  geom_smooth(method = "lm", se = FALSE) +
  geom_point()
```
:::

:::{.column}
<br>
Quadratic Curve Using Linear Regression
```{r}
tidykids_wide |>
  ggplot(aes(x = highered, y = pell)) +
  geom_smooth(method = "lm", formula = y ~ poly (x,2), se = FALSE) +
  geom_point()
```
:::
:::

<!-- *Linear in the parameters (betas) but not in the model specification.* -->

## Smoothers
<hr>
:::{.smaller-font}
- No specific functional form assumptions
- Adapt to local patterns instead
- "Smooth curve"
```{r, fig.height=4}
tidykids_wide |>
  ggplot(aes(x = highered, y = PK12ed)) +
  geom_smooth(se = FALSE) +
  geom_point()
```
:::

# Miscellaneous Lines

## `geom_vline()` & `geom_hline()`
<hr>
:::{.smaller-font}
- Add vertical lines to your plot
:::

:::{.smaller-font}
`geom_vline()`
```{r, fig.height=4}
tidykids_wide |>
  ggplot(aes(x = highered, y = PK12ed)) +
  geom_vline(xintercept = mean(tidykids_wide$highered, na.rm = T), color = "red") +
  geom_point()
```

:::


## `geom_vline()` & `geom_hline()`
<hr>
:::{.smaller-font}
- Add horizontal lines to your plot
:::


:::{.smaller-font}
`geom_hline()`
```{r, fig.height=4}
tidykids_wide |>
  ggplot(aes(x = highered, y = PK12ed)) +
  geom_hline(yintercept = mean(tidykids_wide$PK12ed, na.rm = T), color = "blue") +
  geom_point()
```

:::

# Collaborative Practice

## Collaborative Practice
<hr>
:::{.small-font}

- **Individual think time:** 3 minutes (camera off/mute)
    - Review document
    - Review question prompts
    - Start planning possible approaches/pseudocode
- **Introductions:** 2 minutes (camera on/unmute)
- **Collaborative Work:** (camera on/unmute)

:::

## Collaborative Practice
<hr>
- Use `tidykids` to investigate library spending
- Create time series plot
- Implement {gghighlight}

# Schwabish Extensions

## Bump Chart
<hr>
:::{.extra-small-font}
- Used to visualize the ranking of items over time
- Some wrangling:

```{r}
tidykids_PK12ed_tnneighbors_bump <- tidykids_wide |>
  filter(state %in% c("Tennessee", "Alabama", "Mississippi", "Arkansas","Georgia", "Kentucky", "North Carolina", "Virginia")) |>
  select(PK12ed, state, year) |>
  group_by(year) |>
  mutate(rank = rank(-PK12ed),state_abbr = state.abb[match(state, state.name)]) |>
  ungroup()
```

:::

## Bump Chart
<hr>
:::{.extra-small-font}
- Used to visualize the ranking of items over time
- The plot:

```{r, fig.height=4}
tidykids_PK12ed_tnneighbors_bump |>
  ggplot(aes(x = year, y = rank, color = state)) +
  geom_line(aes(group=state, color=state), linewidth = 3, show.legend = F) +
  geom_point(fill ="#EBEBEB",shape=21, size=11) +
  geom_text(aes(label = rank, color=state), hjust = 0.5, nudge_x = 0, size = 9, show.legend = F) +
  geom_text(data = filter(tidykids_PK12ed_tnneighbors_bump, year == 2016), aes(label = state_abbr), nudge_x = 0.4, nudge_y = 0, size = 6, show.legend = F) +
  scale_y_reverse() +
  theme(legend.position = "none")
```

:::

## Sankey Diagram
<hr>
:::{.extra-small-font}
- Used to visualize flow of data
- New package: [`ggsankey`](https://github.com/davidsjoberg/ggsankey)
```{r, fig.height=4}
library(ggsankey)

tidykids_PK12ed_tnneighbors_bump |>
  ggplot(aes(x = year, node = state, fill = state, value = PK12ed)) +
  geom_sankey_bump(space = 0, type = "alluvial", alpha = .8) +
  theme_sankey_bump(base_size = 16) +
  theme(legend.position = "bottom")
```
:::

## Principles of Line Plots
<hr>
:::{.smaller-font}
1. Connecting lines can visually connect individual data points that have a temporal pattern
    - Note: Temporal variable typically on the x-axis
2. Fitted lines can show the more general trend over time
3. You can add a variety of fitted lines, including linear, quadratic, and smooth lines and curves
4. When you add lines, you don't always need to add points
5. With multiple groups, lines are nearly essential
    - You will need to specify a `group` variable
:::

# Looking Ahead

## Looking Ahead:
<hr>
- Readings:
    - Wilke (2019), Chapters 4 & 19
    - Christiansen (2023), Chapter 8
- No Weekly Assignment
- Mini-Project #1

<!-- # Mini-Project #1

## Mini-Project #1
<hr>
:::{.smaller-font}
- Data from the U.S. News and World Report University Rankings OR Your Own
- **Step 1:** ***Explore*** <br>Think about the scavenger hunt from a few assignments ago. What variables do you have? What does each row represent?
- **Step 2:** ***Summarize*** <br>Wrangle the data to get it into the format needed to answer two RQs of your choosing.
- **Step 3:** ***Visualize*** <br>Create two visualizations to answer your RQs.
<br><br>
**Due: March 14th, 11:59 PM**
:::

## Mini-Project #1
<hr>
:::{.smaller-font}
- Rubric:
    - Knits without errors
    - Functions to explore/wrangle the data are used *correctly*
    - Data wrangling answers the research questions that are posed
    - The information each visualization conveys is clear
    - Each viz meets the requirements set out in the `.Rmd`
        - Custom color
        - Use a theme
        - Use `labs`
    - Complete reflections
    - Pose/answer at least one question in the Slack channel
::: -->