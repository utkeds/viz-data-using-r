---
subtitle: "Maps with {sf} and {ggplot}"
title: "Week 12 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---

```{r setup, include=FALSE}
##NOTE TO SELF: NEED TO ACTUALLY USE {here} so I don't have to edit the file paths when running each chunk to include "week-13" and then take them out to knit. So annoying.

library(tidyverse)

state_by_region <- read_csv("https://github.com/cphalpert/census-regions/blob/master/us%20census%20bureau%20regions%20and%20divisions.csv?raw=true") # data on U.S. states' regions

dat <-
    read_csv(
        "https://github.com/utkeds/f23-founds-eds/blob/main/ntps2021_7341_s1s.csv?raw=true",
        skip = 5
    ) %>% 
  select(State,
         ave_nurses = 2,
         students_per_nurse = 4) %>% 
    filter(!is.na(State)) %>% 
    pivot_longer(-State, names_to = "variable", values_to = "values") %>% 
    left_join(state_by_region)
```

# Weekly Check In/ <br>Download `.zip`

# Start Recording

## Today's Agenda
<hr>

:::{.smaller-font}
- Weekly Check In
<!-- - Polygon maps (`geom_polygon()`) -->
- Vector spatial data and simple features (`geom_sf()`)
- Finding geometries: tigris and `st_read()`
- Creating choropleth maps
- Layering geoms 
- Collaborative Practice
- Looking Ahead
:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

<!-- # Mapping with ggplot2 -->

## Making maps
<hr>
Map making — the art of cartography — is an ancient skill involving communication, attention to detail, and an element of creativity. 

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("early-world-map.jpg")
```

## Visualizing data with maps
<hr>
In addition to being fun and creative, cartography also has important practical applications. A carefully crafted map can be the best way of visualizing data.

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("airbnb-occupancy-eclipse.png")
```

## Visualizing data with maps
<hr>
```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("heatmap_2x.png")
```

<!-- # Polygon maps -->

<!-- ## The {maps} package -->
<!-- <hr> -->
<!-- The {maps} package contains many outlines of continents, countries, states, and counties. It's not very accurate or up-to-date, but is built into R. -->

<!-- To install {maps}, run the following: -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- install.packages("maps") -->
<!-- library(maps) -->
<!-- ``` -->

<!-- ## Long/lat data with {maps} -->
<!-- <hr> -->
<!-- The {maps} package can access geographic longitude/latitude data with `map_data()`. -->

<!-- ```{r} -->
<!-- library(ggplot2) -->
<!-- library(dplyr) -->

<!-- nc_counties <- map_data("county", "north carolina")  -->

<!-- head(nc_counties) -->
<!-- ``` -->

<!-- ## The {maps} package{.smaller} -->
<!-- <hr> -->
<!-- - `long` is longitude. Things to the west of the prime meridian are negative. -->
<!-- - `lat` is latitude. -->
<!-- - `region` and `subregion` tell what region or subregion a set of points surrounds. -->
<!-- - `group` controls (among other things) whether adjacent points should be connected by lines. If they are in the same group, then they get connected, but if they are in different groups then they don’t. -->
<!--     - Having points in different groups means that ggplot "lifts the pen" when going between them. -->

<!-- ```{r} -->
<!-- head(nc_counties) -->
<!-- ``` -->

<!-- ## Plotting long/lat with geom_point(){.smaller} -->
<!-- <hr> -->
<!-- We can plot long/lat coordinates with `geom_point()`. -->

<!-- - `coord_quickmap()` adjusts the axes to ensure that longitude and latitude are rendered on the same scale -->

<!-- ```{r} -->
<!-- ggplot(nc_counties, aes(long, lat)) +  -->
<!--   geom_point(size = .25, show.legend = FALSE) + -->
<!--   coord_quickmap() -->
<!-- ``` -->

<!-- ## geom_polygon() -->
<!-- <hr> -->
<!-- `geom_polygon()` "connects" the dots. -->

<!-- ```{r} -->
<!-- ggplot(nc_counties, aes(long, lat, group = group)) + -->
<!--   geom_polygon(fill = "white", colour = "grey50") +  -->
<!--   coord_quickmap() -->
<!-- ``` -->

<!-- ## Danger of long/lat data -->
<!-- <hr> -->
<!-- ::: {.callout-warning} -->
<!-- However, “longitude-latitude” data format is not the primary file type used in real world mapping. -->
<!-- ::: -->

# Vector spatial data and simple features {sf}

## Vector spatial data
<hr>
- *Vector spatial data* is a spatial data model that represents geographic features as points, lines, and polygons
- Typically, these are encoded with the simple features (sf) encoding

## The {sf} package
<hr>
- We can use the {sf} package to work with vector spatial data
- Install the package by running:

```r
install.packages("sf")
```
- [{sf} cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/sf.pdf)

## The {sf} package{.smaller}
<hr>
- The {sf} package uses the class of simple feature (`sf`) for vector spatial data in R
- {sf} represents vector spatial data much like a regular R data frame, but with a special column, `geometry`, that represents the shape of each feature
- An important benefit is its compatibility with the tidyverse packages

## Inspecting objects of class sf
<hr>
The {sf} package provides a simple way of storing geographic information and the attributes of the geographic units in a single dataset.

In the example below, `nc` is of the class sf:

```{r}
library(sf)
nc_sf <- st_read(system.file("shape/nc.shp", package="sf"))
```

## Inspecting objects of class sf
<hr>
Inspecting the object reveals its `sf` class:

```{r}
class(nc_sf)
```

## The {sf} package{.smaller}
<hr>
- sf objects has variable `geometry` at the end, where each row represents a single geographic unit (simple feature geometry = sfg)
- There are different types of sfgs (`POINT`, `LINESTRING`, `POLYGON`, `MULTIPOLYGON`, etc)

::: {.r-stack}
![](Geometry_Primitives_Wikipedia.png){.fragment width="600" height="300"}

![](Multipart_Geometries_Wikipedia.png){.fragment width="600" height="300"}
:::

::: aside
Graphics Source: [Wikipedia](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)
:::

## The {sf} package{.smaller}
<hr>
- An sf object is essentially a dataframe with geometric information stored as a variable (column)
```{r}
#| echo: true
nc_sf |>
  select(1:3,5:6,15)
```

- NC has 100 counties

## `geom_sf()`
<hr>
- `geom_sf()` allows for visualizing sf objects
  - It is a {ggplot} geom, so it can be used in the same way as other geoms
- Conveniently, `geom_sf()` automatically detects the geometry type of spatial objects stored in sf and draw maps accordingly

## `geom_sf()`
<hr>
```{r}
ggplot(nc_sf) + 
  geom_sf()
```


## `geom_sf()`
<hr>
```{r}
ggplot(nc_sf) + 
  geom_sf() + 
  theme_void() #removes bg, grids, axes, etc.
```

## Specifying the aesthetics{.smaller}
<hr>
Since it is a ggplot2 object, we can define aesthetics as usual, in this case, `fill` and `color`:

```{r}
#| echo: true
library(ggplot2)

ggplot(nc_sf) +
  geom_sf(fill = "#0C1337", color = "white") +
  theme_void()
```

# Finding geometries

## Finding geometries {.smaller}
<hr>
- The `nc` data is included with the {sf} package, but in practice, you will need to find your shapefiles elsewhere

- Two major types of files for this:
    1. Shapefiles (.shp + dependencies)
        - Usually download as a .zip
        - Contains multiple files with the same name but different extensions
        - e.g., `my_shapefile.shp`, `my_shapefile.shx`, `my_shapefile.dbf`, etc.
    2. geoJSON (.geojson)
- We'll focus on shapefiles, which are the most common format
  
## Shapefiles {.smaller}  
<hr> 
- Shapefiles are a collection of files that store the geometry and attributes of geographic features
- e.g., if you wanted to have a map of the counties in Tennessee, you would need a shapefile that contains the geometry of each county in Tennessee
  - Otherwise, you would need to construct the boundaries/geometries yourself.
- Some typical use cases:
  - You want to fill in counties with colors based on some data
  - You want to overlay points on a map, like the locations of schools in Tennessee


# The {tigris} package

## The {tigris} package{.smaller}
<hr>
One option for shapefiles: {tigris} is an R package that allows users to directly download and use TIGER/Line shapefiles from the US Census Bureau using R.

TIGER stands for *Topologically Integrated Geographic Encoding and Referencing* and include three general types of data:

- Legal entities
    - States, counties, school districts, etc.
- Statistical entities
    - Census groups, blocks used for statistical reporting
- Geographic features
    - Roads, rivers, landmarks, etc.

```{r}
#| eval: false
install.packages("tigris")
```


## The {tigris} package{.smaller}
<hr>
- tigris functions return simple features objects with a default year of 2024.
  - Many functions in the package like `states()` and `counties()` and `roads()`
  - See all function options: <https://github.com/walkerke/tigris>
  - The functions have different arguments, so check documentation for each (e.g., `?states()`)
  
:::{layout="[1,1,1]"}
:::{column}
```r
states(
)
```
:::

:::{column}
```r
counties(
  state = "TN"
)
```
:::

:::{column}
```r
roads(
  state = "TN",
  county = "Knox"
)
```
:::
:::

- Note: TIGER data is well known to struggle with water features, so be cautious. There are other places to find good shapefiles, too!

## The {tigris} package{.smaller}
<hr>
```{r, eval=FALSE}
library(tigris)

tn_districts_sf <- school_districts("Tennessee")
tn_districts_sf
```

```{r, results = "hide", message = FALSE, warning = FALSE, echo=FALSE}
library(tigris)

tn_districts_sf <- school_districts("Tennessee")
```

```{r, echo=FALSE}
tn_districts_sf
```
::: aside
Codebook of variables available [here](https://nces.ed.gov/programs/edge/docs/EDGE_SDBOUNDARIES_COMPOSITE_2016.pdf)
:::

## The {tigris} package{.smaller}
<hr>
We can plot our output from tigris using ggplot2 and `geom_sf()`:

```{r}
#| echo: true
tn_districts_sf |>
ggplot() + 
  geom_sf(color="#993414", fill="#FFFFFF") +
  theme_void()
```

# Reading shapefiles

## Reading shapefiles
<hr>
- A second option for shapefiles is to find one on the internet, download it, and read it into R
- There are lots of places to get shapefiles:

:::{layout="[1,1]"}

:::{column}
- [IPUMS](https://international.ipums.org/international/gis.shtml)
- [GADM](https://gadm.org/)
- [Natural Earth](https://www.naturalearthdata.com/downloads/)
- [Eurostat](https://ec.europa.eu/eurostat/web/gisco/geodata)
- [OpenDataSoft](https://public.opendatasoft.com/explore/dataset/world-administrative-boundaries/table/?location=2,42.07882,0.00845&basemap=jawg.light)
:::

:::{column}
- [Free GIS Data](https://freegisdata.rtwilson.com/)
- [Geofabrik/OSM Data](https://download.geofabrik.de/)
- [U.S. Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html)
- [SimpleMaps](https://simplemaps.com/data/world-cities)
- [NCES](https://nces.ed.gov/programs/edge/Geographic/DistrictBoundaries)
:::

:::

## Reading shapefiles{.smaller}
<hr>
- Lots of government agencies and organizations provide shapefiles for free, including [Knox County](https://knoxplanning.org/data/open-data)
- Let's say we want to map the Zoning districts from Knox County (available here: <https://www.arcgis.com/home/item.html?id=481b8a768b20403998fb9b454f35d23b>).

- I downloaded the shapefile .zip and saved it in my Week 12 folder.
- When I unpacked the folder, I renamed it to `shapefiles` for ease.

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("knox.png")
```

## Reading shapefiles{.smaller}
<hr>
::: {.callout-note}
## Note: The `st_` prefix

In {sf} spatial functions have the pre-fix `st_`
:::

I'll use the function `st_read()` to read in the shapefile

- `dsn`: the path to the shapefile folder
- `layer`: name of the shapefile

```{r}
#| echo: true
knox_zones_sf <-
    st_read(dsn = "shapefiles",
            layer = "Knoxville-Knox_County_Zoning")
```

## Reading shapefiles{.smaller}
<hr>

::: {.callout-tip}
When naming objects, I like to use the `_sf` suffix to indicate that it is a simple feature object. This helps me remember that it is a spatial object and not a regular data frame.
:::

```{r}
#| echo: true
knox_zones_sf <-
    st_read(dsn = "shapefiles",
            layer = "Knoxville-Knox_County_Zoning")
```

- This output says it has a projected CRS. What does that mean ?

# Understanding Projections

## Understanding projections{.smaller}
<hr>
- Geometries can be projected (projected Coordinate Reference System) or unprojected (geodetic Coordinate Reference System)
  - What's the difference?
  
**Geodetic CRS** = Earth as geodetic sphere
```{r}
tn_districts_sf |>
  select(3:4) |>
  head(1)
```

- The most common/often default geodetic CRS is WGS84 (EPSG: 4326)

## Understanding projections{.smaller}
<hr>
- Geometries can be projected (projected Coordinate Reference System) or unprojected (geodetic Coordinate Reference System)
  - What's the difference?

**Projected CRS** = Earth as a flat surface
```{r}
knox_zones_sf |>
  select(1,3,10,11) |>
  head(1)
```

## Understanding projections{.smaller}
<hr>
- Projected CRS vs. Geodetic CRS: What are implications?
  
```{r, warning=FALSE, message=FALSE}
library(rnaturalearth) #Easy world map
world_sf <- ne_countries(scale = "medium", returnclass = "sf") #getting world map from pkg
```

:::{layout="[1,1]"}

:::::{column}
**Geodetic CRS** = sphere

[- Note: R still flattens, but you aren't telling it how]{.extra-small-font}
```{r}
ggplot(world_sf) +
  geom_sf() +
  ggtitle("Geodetic CRS (WGS84, degrees)")
```
:::::

:::::{column}
**Projected CRS** = flattened
```{r}
world_proj_sf <- st_transform(world_sf, crs = "+proj=moll") 
#reprojecting to Mollweide - good for world maps
ggplot(world_proj_sf) +
  geom_sf() +
  ggtitle("Projected CRS (Mollweide, meters)")
```
:::::

:::

<!-- ## Understanding projections{.smaller} -->
<!-- <hr> -->
<!-- - Cylindrical, conical, and planar projections are the three main types of map projections -->
<!-- ```{r} -->
<!-- #| echo: false -->
<!-- #| out.width: 50% -->
<!-- #| fig-align: center -->
<!-- knitr::include_graphics("projection_families.png") -->
<!-- ``` -->

<!-- ::: aside -->
<!-- Source: [QGIS: Coordinate Reference Systems](https://docs.qgis.org/3.34/en/docs/gentle_gis_introduction/coordinate_reference_systems.html) -->
<!-- ::: -->

## Understanding projections{.smaller}
<hr>
:::{layout="[1,1,]"}

:::{column}
**Why use a geodetic CRS?**

- Preserves true latitude and longitude
:::

:::{column}
**Why use a projected CRS?**

- Preserves area, distance, or direction
- Distance and area calculations are more accurate
- Can created local maps with minimal distortion
:::
:::
- All projections have a CRS, not all CRSes have projections
- Standardized CRSes have a [unique EPSG code](https://spatialreference.org/ref/epsg/)

## Understanding projections{.smaller}
<hr>
:::{layout="[1,1,]"}

:::{column}
**Why use a geodetic CRS?**

::::{.extra-small-font}
- Preserves true latitude and longitude
::::
```{r, echo=FALSE}
ggplot(world_sf) +
  geom_sf() +
  ggtitle("Geodetic CRS (WGS84, degrees)")
```
:::

:::{column}
**Why use a projected CRS?**

::::{.extra-small-font}
- Preserves area, distance, or direction
- Distance and area calculations are more accurate
- Can created local maps with minimal distortion
::::
```{r, echo=FALSE}
world_proj_sf <- st_transform(world_sf, crs = "+proj=moll") 
#reprojecting to Mollweide - good for world maps
ggplot(world_proj_sf) +
  geom_sf() +
  ggtitle("Projected CRS (Mollweide, meters)")
```
:::
:::

## Understanding projections {.smaller}
<hr>
- Is the CRS of `knox_zones_sf` geodetic or projected?
- What is the [EPSG](https://spatialreference.org/ref/epsg/2915/) code for the CRS of `knox_zones_sf`?
- The `st_crs()` function returns the CRS of an sf object

```{r}
st_crs(knox_zones_sf)
```

# Layering in Our Own Data (.csv)

## Plotting the shapefile {.smaller}
<hr>
```{r}
ggplot() +
  geom_sf(data = knox_zones_sf)
```

## Adding our data as `.csv` {.smaller}
<hr>
```{r}
knox_sites <- read_csv("KnoxSites.csv")

knox_sites
```

## Converting our data to sf object {.smaller}
<hr>
- Creating an sf object from a data frame requires the `st_as_sf()` function
```{r}
knox_sites_sf <- st_as_sf(knox_sites, 
                          coords = c("Longitude", "Latitude"), crs = 4326)
# Our knox_sites data is in CRS 4326, 
# as it's in latitude/longitude degrees

class(knox_sites_sf)
```

## Plotting our data {.smaller}
<hr>
- Can we just plot it?
```{r}
ggplot() +
  geom_sf(data = knox_zones_sf) +
  geom_sf(data = knox_sites_sf, color = "#FF8200", size = 3)
```

- Yes! But, this could have caused a problem. Why?

## Best Practice {.smaller}
<hr>
- Best practice: All map components/layers are in the same CRS
- Otherwise transform one of them to match the other

:::{layout="[1,1]"}
:::{column}
**What is CRS of `knox_zones_sf`?**
```{r}
st_crs(knox_zones_sf)
```
:::
:::{column}
**What is CRS of `knox_sites_sf`?**
```{r}
st_crs(knox_sites_sf)
```
:::
:::

## Creating sf objects{.smaller}
<hr>
- Although the plot worked, R was projecting-on-the-fly
  - R was automagically transforming the CRS of 2nd layer to match the first layer
  - This is not ideal, as it can lead to inaccuracies
- Much better if all of the map components/layers are in the same CRS
```{r}
#transforming the CRS of knox_sites_sf to match the knox_zones CRS
knox_sites_sf <- st_transform(knox_sites_sf, st_crs(knox_zones_sf))

knox_sites_sf
```

## Plotting
<hr>
```{r}
ggplot() +
  geom_sf(data = knox_zones_sf) +
  geom_sf(data = knox_sites_sf, color = "#FF8200", size = 3)
```

# Choropleth Maps

## Choropleth maps
<hr>
Geographical heat maps, also known as choropleth maps, are one way of visualizing geographic data.

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("photo.png")
```

## Joining spatial data - FIPS{.smaller}
<hr>
- To make choropleths (and a lot of other maps), we often need to join data
- The Federal Information Processing Standards (FIPS) have specific codes for joining [states, counties](https://transition.fcc.gov/oet/info/maps/census/fips/fips.txt), etc.
- Also often included in datasets

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("dplyr_joins.svg")
```

## Joining spatial data - FIPS
<hr>
> Keep all rows from `x`, and all columns from `x` and `y`. Rows in `x` with no match in `y` will have `NA` values in the new columns.

```{r}
#| echo: false
#| out.width: 60%
#| fig-align: center
knitr::include_graphics("left-join.gif")
```

## Joining spatial data - FIPS{.smaller}
<hr>
```{r}
#remotes::install_github("dcl-docs/ussf")
states_sf <- ussf::boundaries("state", resolution = "5m")
#Note: This is a custom/non-standard CRS, so no EPSG code
# It handles the AK/HI problem for us

states_sf |>
  select(1,5:10) |>
  head()
```

## Joining spatial data - FIPS{.smaller}
<hr>
We can plot the states using `geom_sf()`:

```{r}
ggplot()+
  geom_sf(data=states_sf)
```

## Joining spatial data - FIPS{.smaller}
<hr>
Now, we will use data on state population counts from the 2020 Census from {tidycensus}:
<!-- Note: You need to have installed the {tidycensus} API key to render this -->
```{r}
#install.packages("tidycensus")
library(tidycensus)
pop_counts_2020 <- get_decennial(geography = "state",
                                             variables = "DP1_0001C",
                                             year = 2020,
                                             sumfile = "dp")

head(pop_counts_2020)
```

## Joining spatial data - FIPS{.smaller}
<hr>
- Note that both `states_sf` AND `pop_counts_2020` have a FIPS code variable
  - We can join them together using `left_join()` and the FIPS code!
  - Note that the FIPS code is called `STATEFP` in `states_sf` and `GEOID` in `pop_counts_2020`

:::{layout="[1,1]"}

:::{column}
```{r}
states_sf|>
  select(1,5:6) |>
  head()
```
:::

:::{column}
```{r}
head(pop_counts_2020)
```
:::

:::

## Joining spatial data - FIPS{.smaller}
<hr>
- This is how you join the `states_sf` and `pop_counts_2020` together:

```{r}
#REUSABLE CODE/GENERAL FORMULA
#object <- left_join(shapefile_sf, data, by = "key")

joined_state_data_sf <- left_join(states_sf, pop_counts_2020, by = c("STATEFP" = "GEOID"))

joined_state_data_sf |>
  select(1,5:6,10:13) |>
  head()
```

## Joining spatial data - FIPS{.smaller}
<hr>
Discussion about `left_join()`:

1. What is `NAME.x` and `NAME.y`?
2. What happens if states_sf (the `x` argument) has a state that is not in pop_counts_2020 (the `y` argument)?
3. What happens if pop_counts_2020 has a state that is not in states_sf?


```{r}
joined_state_data_sf <- left_join(states_sf, pop_counts_2020, by = c("STATEFP" = "GEOID"))

joined_state_data_sf |>
  select(1,5:6,10:13) |>
  head(3)
```

## Plotting spatial data{.smaller}
<hr>
- Add the data as an aesthetic in your ggplot object with `fill()`
- Be sure to include in your `aes()` since it's referring to data

```{r}
library(viridis)

ggplot()+
  geom_sf(data=joined_state_data_sf, aes(fill = value))+
  scale_fill_viridis(option = "magma", labels = scales::comma, direction = -1)
```

# Layering geoms \n(a review)

## Plotting points (State Capitals){.smaller}
<hr>
Let's say we have another dataset with longitude/latitude data for each state capital's city center:

:::{layout="[4,3]"}

:::{column}
```{r}
joined_state_data_sf |>
  select(1,6,13) |>
  head(3)
```
:::

:::{column}
```{r}
state_capitals <- 
  read_csv("us-state-capitals.csv")

head(state_capitals)
```
:::
:::

:::aside
Capitals data from [jasperdebie's github](https://github.com/jasperdebie/VisInfo/blob/master/us-state-capitals.csv)
:::

## Add to map{.smaller}
<hr>
- Let's plot them
- Oh no! [{ussf}](https://github.com/dcl-docs/ussf) handled the AK/HI problem, but our `.csv` file still has the AK/HI problem
```{r}
state_capitals_sf <- st_as_sf(state_capitals, coords = c("longitude", "latitude"), crs = 4326)

ggplot() +
  geom_sf(data=joined_state_data_sf, aes(fill = value))+
  geom_sf(data=state_capitals_sf, shape =8, color="limegreen" )+
  scale_fill_viridis(option = "magma", labels = scales::comma, direction = -1)
```

## Add to map{.smaller}
<hr>
- This is fixable (but complicated since it's a custom CRS). Contact me if you need to address this issue in your final project.

```{r, echo=F}
#Taken from {ussf}
albers_contig <-"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=WGS84 +no_defs"
albers_alaska <-"+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +datum=WGS84 +no_defs"
albers_hawaii <-"+proj=aea +lat_1=8 +lat_2=18 +lat_0=13 +lon_0=-157 +x_0=0 +y_0=0 +datum=WGS84 +no_defs"

contig <-
  state_capitals_sf |>
  filter(!name %in% c("Alaska","Hawaii")) |>
  st_transform(crs = albers_contig)

bbox_contig <- st_bbox(contig)

position <- function(bbox, x_offset, y_offset) {
  st_sfc(st_point(c(
    bbox$xmin + x_offset * (bbox$xmax - bbox$xmin),
    bbox$ymin + y_offset * (bbox$ymax - bbox$ymin)
  )))
}

alaska_crop <- c(xmin = -172, xmax = -125, ymin = 50, ymax = 75)
alaska_scale <- 0.35
alaska_x_offset <- 0.145
alaska_y_offset <- -0.12
#alaska_y_offset <- 0.119

#Pulling each state observation out of sf object so I can delete the two old ones
alaska <-
  state_capitals_sf %>%
  filter(name == "Alaska") %>%
  st_crop(alaska_crop) %>%
  st_transform(crs = albers_alaska) %>%
  st_set_geometry(
    (st_geometry(.) - st_centroid(st_union(st_geometry(.)))) *
      alaska_scale +
      position(
        bbox = bbox_contig,
        x_offset = alaska_x_offset,
        y_offset = alaska_y_offset)) %>%
  st_set_crs(value = albers_contig)

hawaii_crop <- c(xmin = -165, xmax = -150, ymin = 15, ymax = 25)
hawaii_scale <- 1
hawaii_x_offset <- 0.25
hawaii_y_offset <- -0.1

hawaii <-
  state_capitals_sf %>%
  filter(name == "Hawaii") %>%
  st_crop(hawaii_crop) %>%
  st_transform(crs = albers_hawaii) %>%
  st_set_geometry(
    (st_geometry(.) - st_centroid(st_union(st_geometry(.)))) *
      hawaii_scale +
      position(
        bbox = bbox_contig,
        x_offset = hawaii_x_offset,
        y_offset = hawaii_y_offset)) %>%
  st_set_crs(value = albers_contig)

#Deleting the old ones
state_capitals_sf <- state_capitals_sf |>
  filter(name != "Alaska" & name != "Hawaii")

#Adding the new ones back
state_capitals_sf <- state_capitals_sf |>
  st_transform(crs = albers_contig)
state_capitals_sf <- rbind(state_capitals_sf, alaska, hawaii)
```

```{r}
ggplot() +
  geom_sf(data=joined_state_data_sf, aes(fill = value))+
  geom_sf(data=state_capitals_sf, shape =8, color="limegreen" )+
  scale_fill_viridis(option = "magma", labels = scales::comma, direction = -1)
```

```{r, echo=F}
# coords <- st_coordinates(state_capitals_sf)
# df <- cbind(st_drop_geometry(state_capitals_sf), coords)
# 
# ggplot() +
#   geom_sf(data=joined_state_data_sf, aes(fill = value))+
#   geom_point(data=df, aes(x = X, y = Y),  shape =8, color="limegreen" )+
#   scale_fill_viridis(option = "magma", labels = scales::comma, direction = -1)
```

# Collaborative Practice


## Grad certificate
<hr>
The University of Tennessee, Knoxville, offers an online graduate certificate in Educational Data Science for students interested in digital data collection, analysis, visualization, and more in educational settings. The certificate can be added to current graduate students’ studies or pursued as a stand-alone certificate for graduate-level students.

- [More Info](https://volsonline.utk.edu/programs-degrees/educational-data-science-gc/)
- [Apply Here](https://gradschool.utk.edu/academics/forms-central/admission-to-a-graduate-certificate-program/)

# Looking Ahead

## Next Week's Structure
<hr>
- Test drive zoom timers
- Preview [peer feedback form](https://airtable.com/appxk3cJS5Wp4CYK4/shrNo1yJwUrKLYtPl)
  - Praise
  - Question
  - Polish
  
## Looking Ahead {.smaller}
<hr>
- Next week:
  - Final Project Presentations!
  - 3 min presentation of your final project
    - 1 overview slide, 2 plots
- Homework:
  - Complete slides in shared Google Slides by Wednesday night
  - Complete PingPong post test by Wednesday night
  - Complete TN Voice
  - Final project Canvas submissions due 5/9, 11:59pm
    - Remember to explicitly state your research question for each viz

<!-- ## Looking Ahead -->
<!-- <hr> -->
<!-- * Assignment: Mapping ACS & Census Data -->
<!-- * Readings: -->
<!--   * Leaflet: -->
<!--       * [Goldstein-Greenwood, J. (2020)](https://library.virginia.edu/data/articles/data-scientist-as-cartographer-an-introduction-to-making-interactive-maps-in-r-with-leaflet) -->
<!--       * [R Coder (2024)](https://r-charts.com/spatial/interactive-maps-leaflet/) -->
<!--   * plot_ly: -->
<!--       * [Sievert, C. (2019), Chapter 2](https://plotly-r.com/overview) -->
<!--       * [Sievert, C. (2019), Chapter 4](https://plotly-r.com/maps) -->

<!-- ## Other data sources{.smaller} -->
<!-- <hr> -->
<!-- * The USAboundaries package, [https://github.com/ropensci/USAboundaries](https://github.com/ropensci/USAboundaries) contains state, county and zip code data for the US -->
<!-- * The rnaturalearth package (South 2017) bundles up the free, high-quality data from [https://naturalearthdata.com/](https://naturalearthdata.com/) -->
<!-- * The osmar package, [https://cran.r-project.org/package=osmar](https://cran.r-project.org/package=osmar) wraps up the OpenStreetMap API so you can access a wide range of vector data including individual streets and buildings -->

<!-- ## Sources of `.shp` files{.smaller} -->
<!-- <hr> -->

<!-- :::{layout="[1,1]"} -->

<!-- :::{column} -->
<!-- - [IPUMS](https://international.ipums.org/international/gis.shtml) -->
<!-- - [GADM](https://gadm.org/) -->
<!-- - [Natural Earth](https://www.naturalearthdata.com/downloads/) -->
<!-- - [Eurostat](https://ec.europa.eu/eurostat/web/gisco/geodata) -->
<!-- - [OpenDataSoft](https://public.opendatasoft.com/explore/dataset/world-administrative-boundaries/table/?location=2,42.07882,0.00845&basemap=jawg.light) -->
<!-- ::: -->

<!-- :::{column} -->
<!-- - [Free GIS Data](https://freegisdata.rtwilson.com/) -->
<!-- - [Geofabrik/OSM Data](https://download.geofabrik.de/) -->
<!-- - [U.S. Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html) -->
<!-- - [SimpleMaps](https://simplemaps.com/data/world-cities) -->
<!-- - [NCES](https://nces.ed.gov/programs/edge/Geographic/DistrictBoundaries) -->
<!-- ::: -->

<!-- ::: -->