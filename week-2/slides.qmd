---
subtitle: "R Basics & {tidyverse}"
title: "Week 2 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---
    
```{r setup, include=FALSE}
library(tidyverse) #includes starwars data set

#devtools::install_github("RMHogervorst/TNG")
library(TNG)
```

# Weekly Check In

# Start Recording

## Today's Agenda {.smaller}
<hr>

- Weekly Check In
- Homework Review
  - The Verbatim Backtick
  - Filepaths
  - Installing and Loading Packages
- Norms
- {tidyverse} Introduction
  - {dplyr} Basics
  - {ggplot2} Preview
- {palmerpenguins} Scavenger Hunt
- Looking Ahead

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Homework Review

## The verbatim `backtick` {.smaller}
<hr>
- To format text verbatim, use backticks.
  - Not single quotes
  - Backtick is the same key as tilde (next to #1)
  - Three backticks --> code block in `.Rmd`
<br>
<br>
- Slack also accepts markdown formatting
  - One reason why we use Slack for this class
  - Honors both in-line `verbatim` formatting and code blocks
<br>
<br>
- **Try it!** DM yourself in Slack or post in the class channel to see how backticks work in Slack.

## Filepaths {.smaller}
<hr>
- When you are working within an `.Rproj`, it makes filepaths easier.
- The root directory (starting place) is where the .Rproj file lives.
  - If the file (think `.csv` for now) is in the root, then just provide the filename
  - If the file is in a folder within the `.Rproj` start the path with the name of the folder
<br>
<br>
- Note that "../" also backs you up one level from the root directory.
<br>
<br>
**`.Rproj` DEMO**

## Installing Packages {.smaller}
<hr>
- You only install a package once on your computer (the first time you use it)
- Note: I often do this in the console (aka scratchpad)
```r
install.packages("tidyverse")
```
<br>
<br>

- Then, each time you want to use it you will need to load it from your package library
- Do this in your `.R` script or `.Rmd` file itself (usually at the top)
```r
library(tidyverse)
```
  

# {tidyverse} Intro

## {tidyverse} Intro {.smaller}
<hr>
- The *tidyverse* is a collection of packages for data science
  - The packages can be loaded separately, but just loading {tidyverse} installs eight core packages.
  - We'll focus on two:
    1. {dplyr} - data wrangling
    2. {ggplot2} - data viz

# {dplyr} Basics

## {dplyr} Basics
<hr>
- From Estrellado et al. (2020)
- **In chat:** What is a function?

## {dplyr} Basic Functions
<hr>
```{r include=FALSE}
starwars <- starwars |>
  slice(1:5) |>
  select(1:5)
```

`select()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`select(name, height)`]{.fragment}

[- Use this to **select columns/variables**]{.extra-small-font .fragment}
<br>
<div class="fragment">
```{r}
starwars |>
  select(name, height)
```
</div>
::::
:::

## {dplyr} Basic Functions
<hr>
`select()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
`select(name, height)`

[- **Note:** These are the same!]{.extra-small-font}
<br>

```{r echo=TRUE, eval=FALSE}
starwars |>
  select(name, height)

select(starwars, name, height)
```
::::
:::

# Why the same?

## {dplyr} Basic Functions
<hr>
Pipe Operator: `%>% or |>`
<hr>

[The pipe operator connects functions together into a *chain* of step-by-step commands. It can be translated as **and then**.]{.small-font}

:::{layout="[65,35]"}
::::{layout="[1]" .small-font}
<br>
<br>
```{r, echo=TRUE, eval = TRUE, warning=TRUE}
starwars |>
  select(name, height) |>
  glimpse()
```
::::
::::{.small-font}
<br>
*In English*:<br>

:::{.extra-small-font .incremental}
1. Take the starwars data set *and then*
2. `select` the name and height columns *and then*
3. `glimpse` the result in R Studio
:::
::::
:::

## Pipe Shortcut {.smaller}
<hr>
- There is a shortcut for the pipe operator
  - Windows/Linux: Ctrl + Shift + M
  - Mac: Cmd + Shift + M

## Pipe Default {.smaller}
<hr>
- In R Studio, you can set which pipe to use
  - The old one from {magrittr} `%>%`
  - The new one in base R `|>` (preferred)

**DEMO**
(Tools > Global Options > Code)

## {dplyr} Basic Functions
<hr>
`slice()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`slice(3:5)`]{.fragment}

[- Use this to **select rows**]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  slice(3:5)
```
</div>
::::
::::
:::


## `dplyr` Basic Functions
<hr>
`filter()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`filter(mass >= 50)`]{.fragment}

[- Use this to **filter rows**]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  filter(mass >= 50)
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`filter()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`filter(hair_color == "brown")`]{.fragment .extra-small-font}

[- Use this to **filter rows**]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  filter(hair_color == "brown")
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`filter()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`filter(!is.na(hair_color))`]{.fragment .extra-small-font}

[- Use this to **filter rows**]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  filter(!is.na(hair_color))
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`str()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`str(starwars)`]{.fragment}

[- Use this to see the **structure** of an object]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
str(starwars)
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`head()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`head(starwars)`]{.fragment}

[- Use this to **see the first** ***n*** **rows** of an object]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
head(starwars)

head(starwars, 2)
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`rename()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`rename("weight" = mass)`]{.fragment .extra-small-font}

[- Use this to **rename** a column]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  rename("weight" = mass)
```
</div>

<br>
[-But reviewing starwars right after, it still says mass. Why?]{.fragment .extra-small-font}

<div class="fragment">
```{r}
starwars
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`rename()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`rename("weight" = mass)`]{.fragment .extra-small-font}

[- You need to assign the changes to keep them!]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
renamed_starwars <- starwars |>
  rename("weight" = mass)

# starwars <- starwars |>
#   rename("weight" = mass)

renamed_starwars
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`mutate()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example data - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`mutate()` A Challenge!]{.fragment}

:::{.extra-small-font .fragment}
1. How many columns do we expect?
2. What does each line do?
3. Can we simplify it?
:::

::::{.extra-small-font}
<div class="fragment">
```{r eval=F}
starwars |>
  mutate(one = height^2) |>
  mutate(two = height*mass) |>
  mutate(hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
</div>
::::
::::
:::

## {dplyr} Basic Functions
<hr>
`mutate()`
<br>
<hr>

[`mutate()` A Challenge!]{.fragment}

::::{.small-font}
<div class="fragment">
```{r eval=T}
starwars |>
  mutate(one = height^2) |>
  mutate(two = height*mass) |>
  mutate(hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
</div>
::::

## {dplyr} Basic Functions
<hr>
`mutate()`
<br>
<hr>

`mutate()` A Challenge!

::::{.small-font}
```{r eval=T}
starwars |>
  mutate(one = height^2,
        two = height*mass,
        hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
::::

# {ggplot2} Preview

## {ggplot2} Preview
<hr>
- {ggplot2} or {ggplot} is most popular data viz package in R.
- Part of the {tidyverse}
- We'll learn more in Week 4, but we'll use it a bit today.

# {PalmerPenguins} Scavenger Hunt

## Scavenger Hunt 1 of 2 {.smaller}
<hr>
- In the `week-2` folder you will find an activity called `Palmer Penguins: dplyr & ggplot2 Scavenger Hunt`
- The `.Rmd` file has instructions embedded.
- You will be sent into breakout rooms.
- Everyone should have the .Rmd file open and be ready to work together.
- However, only 1 knitted file should be submitted (i.e. 1 person should submit for group credit)
- Make sure everyone's name is in author field!!!
- The person who submits should be sharing their screen so the group can collaboratively work on the final document.

## Scavenger Hunt 2 of 2 {.smaller}
<hr>
Breakout room structure:

- **Individual Think Time**: ~ 5 min (camera off / mute)
  - Review document
  - Review prompts
  - Start planning possible approaches/pseudocode
- **Introductions**: ~ 3 min (camera on/ unmute)
- **Collaborative Work** (camera on/unmute)

# Looking Ahead

## Looking Ahead
<hr>
- Week 2 Assignment
  - My First Data Visualization (maybe 2nd)
- Readings
  - **Work Through** Beck (n.d.)
  - **Skim** dplyr cheatsheet
  - **Skim** Wickham et al., (2023)
