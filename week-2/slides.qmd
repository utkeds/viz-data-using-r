---
subtitle: "R Basics & {tidyverse}"
title: "Week 2 - STEM 691"
author: "Dr. Kelly Boles & Dr. Zhen Xu"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: slides_images/UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---
    
```{r setup, include=FALSE}
library(tidyverse) #includes starwars data set
library(gt)
```

# Weekly Check In, Download `.zip`, Download Slides

# Start Recording

## Today's Agenda {.smaller}
<hr>

- Weekly Check In
- Norms
- Collaborative Norms
- Information Architect Activity (Wk 1)
- {tidyverse} Introduction
  - {dplyr} Basics
  - {ggplot2} Preview
- {palmerpenguins} Scavenger Hunt
- Looking Ahead

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# Last Week

## From Last Week {.smaller}
<hr>
- Markdown activity:
  - Markdown is sensitive to spacing
    - e.g., single spaces between dashes and words to make bullets
  - Quarto is sensitive to line spacing
    - e.g., If a bullet doesn't format and you've checked the markdown formatting, put a line break/return before you start the list

## From Last Week {.smaller}
<hr>
- YAML header is also sensitive
- We've added another line in the default header in order to retain the formatting once uploaded to Canvas 
  - It makes the Quarto .html rendering behave like the R Markdown .html rendering

```r
---
title: "Untitled"
author: "Fabulous Student"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
execute:
    warning: false
    message: false
---
```
- All documents have been updated to reflect this.

## Collaborative Norms - Breakouts{.smaller}
<hr>
- **Individual Think Time**: ~ 5 min (camera off / mute)
  - Review document
  - Review prompts
  - Start planning possible approaches/pseudocode
- **Introductions**: ~ 3 min (camera on/ unmute)
- **Collaborative Work** (camera on/unmute)

## Collaborative Norms - Slack {.smaller}
<hr>
- Slack is also a great collaborative tool!
  - It accepts markdown formatting
  - Honors both in-line `verbatim` formatting and code cells
  - You can create a Direct Message group and share code/files with each other or the instructors
![](slides_images/DM_in_Slack.png)
<br>
<br>
- **Try it!** DM yourself in Slack or post in the class channel to see how backticks work in Slack.

# Information Architect (Wk 1)

## Information Architect {.smaller}
<hr>
Cairo (2013), Chapter 1, p. 17

> "The role of an information architect is to anticipate this [visualization decoding] process and generate order before people's brains try to do it on their own "

## Information Architect {.smaller}
<hr>
For each visualization:

:::{.small-font}
- What is the goal of the information architect?
  - *If clear* (general agreement):
    - Does the visual align well with the goal?
    - Is it convincing?
    - How could it be further improved?
  - *If unclear* (some disagreement):
    - What elements of the visual are conflicting?
    - How could the visual be improved to better clarify the potential goal(s)?

:::

## Information Architect {.smaller}
<hr>
Using your breakout room #, go to the corresponding Miro board linked in Canvas.

Breakout room structure:

- **Individual Think Time**: ~ 5 min (camera off / mute)
  - Review document
- **Introductions**: ~ 3 min (camera on/ unmute)
- **Collaborative Work** (camera on/unmute)

## Cairo (2013), Chapter 2
<hr>
:::{.small-font}
*On visualizations as tools:*
<br>
<br>
"It is tempting to propose rock-solid rules—if you want to show change through time, use a time-series chart; if you need to compare, use a bar chart; or to display correlation, use a scatterplot... But reality is complex... What is really important is to remember that no matter how creative and innovative you wish to be in your graphics and visualizations, the first thing you must do... is **ask yourself what users are likely to try to do with your tool.**
:::
<br>
(Cairo, 2013, p. 43)

# Welcome to the {tidyverse}

## Installing Packages {.smaller}
<hr>
- You only install a package once on your computer (the first time you use it)
- Note: I do this in the console (aka scratchpad)
```r
install.packages("tidyverse")
```
<br>

- Then, each time you want to use it you will need to load it from your package library
- Do this in your `.R` script or `.qmd` file itself (usually at the top)
```r
library(tidyverse)
```

## {tidyverse} Intro {.smaller}
<hr>
- The *tidyverse* is a collection of packages for data science
  - The packages can be loaded separately, but just loading {tidyverse} installs eight core packages.
  - We'll largely focus on two:
    1. {dplyr} - data wrangling
    2. {ggplot2} - data viz

# {dplyr} Basics

## {dplyr} Basics
<hr>
- From Estrellado et al. (2020)
- **In chat:** What is a function?

```{r include=FALSE}
starwars <- starwars |>
  slice(1:5) |>
  select(1:5)
```

## {dplyr} Basic Functions
<hr>
`select()`
<br>
<hr>

::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`data |> select(var1, var2)`]{.fragment}

[- Use this to **select columns/variables**]{.fragment .extra-small-font}

:::{.fragment}
```{r}
starwars |>
  select(name, height)
```
:::

:::
:::


## {dplyr} Basic Functions
<hr>
`select()`
<br>
<hr>

::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

:::{.fragment}
`data |> select(var1, var2)` <br>
*or* <br>
`select(data, var1, var2)`
:::

[- **Note**: These are the same!]{.fragment .extra-small-font}

:::{.fragment}
```{r echo=TRUE, eval=FALSE}
starwars |>
  select(name, height)

select(starwars, name, height)
```
:::

:::
:::

# Why the same?

## {dplyr} Basic Functions
<hr>
Pipe Operator: `%>% or |>`
<hr>

[The pipe operator connects functions together into a *chain* of step-by-step commands. It can be translated as **and then**.]{.small-font}

::: {.columns .small-font}

::: {.column width="45%"}

```{r}
starwars |>
  select(name, height) |>
  glimpse()
```
:::
::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}
::::{.small-font}

*In English*:<br>

:::{.extra-small-font .incremental}
1. Take the starwars data set *and then*
2. `select` the name and height columns *and then*
3. `glimpse` the result in Positron
:::
:::
::::
:::

## Pipe Shortcut {.smaller}
<hr>
- There is a shortcut for the pipe operator
  - **Windows/Linux**: Ctrl + Shift + M
  - **Mac**: Cmd + Shift + M

## Pipe History {.smaller}
<hr>
- The original pipe was in {magrittr} `%>%`
  - Still used in a lot of documentation/books

- The new pipe is in base R `|>`
  - Now recommended for use
  - Positron shortcut defaults to it 

## {dplyr} Basic Functions
<hr>
`slice()`
<br>
<hr>

::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

:::{.fragment}
`data |> slice(3:5)`
:::

[- Use this to **select rows**]{.extra-small-font .fragment}
<br>

:::{.fragment .medium-small-font}
```{r}
starwars |>
  slice(3:5)
```
:::

:::
:::


## {dplyr} Basic Functions
<hr>
`filter()`
<br>
<hr>
::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`data |> filter(var >= 50)`]{.fragment}

[- Use this to **filter rows**]{.extra-small-font .fragment}
<br>

:::{.fragment .medium-small-font}

```{r}
starwars |>
  filter(mass >= 50)
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`filter()`
<br>
<hr>

::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```
:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`data |> filter(var == "brown")`]{.fragment .medium-small-font}

[- Use this to **filter rows**]{.extra-small-font .fragment}

:::{.fragment .medium-small-font}
```{r}
starwars |>
  filter(hair_color == "brown")
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`filter()`
<br>
<hr>
::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`data |> filter(!is.na(var))`]{.fragment .medium-small-font}

[- Use this to **filter rows**]{.extra-small-font .fragment}

:::{.fragment .medium-small-font}
```{r}
starwars |>
  filter(!is.na(hair_color))
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`str()`
<br>
<hr>

::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`str(data)`]{.fragment}

[- Use this to see the **structure** of an object]{.extra-small-font .fragment}

:::{.fragment .medium-small-font}

```{r}
str(starwars)
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`head()`
<br>
<hr>
::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`head(data)`]{.fragment}

[- Use this to **see the first** ***n*** **rows** of an object]{.extra-small-font .fragment}
<br>

:::{.fragment .medium-small-font}

```{r}
head(starwars)

head(starwars, 2)
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`rename()`
<br>
<hr>

::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}


[`rename(new_var_name = old_var_name)`]{.fragment .medium-small-font}

[- Use this to **rename** a column]{.extra-small-font .fragment}
<br>

::::{.fragment .medium-small-font}
```{r}
starwars |>
  rename(weight = mass)
```
:::

:::

[-But reviewing starwars right after, it still says mass. Why?]{.fragment .medium-small-font}

:::{.fragment .medium-small-font}
```{r}
starwars
```
:::
:::

## {dplyr} Basic Functions
<hr>
`rename()`
<br>
<hr>
::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`rename("new_var_name" = old_var_name)`]{.fragment .medium-small-font}

[- You need to assign the changes to keep them!]{.extra-small-font .fragment}

::::{.fragment .medium-small-font}
```{r}
renamed_starwars <- starwars |>
  rename("weight" = mass)

# starwars <- starwars |>
#   rename("weight" = mass)

renamed_starwars
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`mutate()`
<br>
<hr>
::: {.columns .small-font}

::: {.column width="45%"}

**Example data – starwars**

```{r echo=FALSE}
starwars |>
  slice(1:5) |>
  select(name:skin_color) |>
  gt() |>
  tab_options(
    table.width = pct(100),
    table.font.size = px(13),
    data_row.padding = px(2)
  ) |>
  tab_style(
    style = cell_fill(color = "#f9f9f9"),
    locations = cells_body(rows = c(1, 3, 5))
  ) |>
  opt_table_lines(extent = "none")
```

:::

::: {.column style="border-left: 4px solid #FF8200; padding-left: 1em;"}

[`mutate()` A Challenge!]{.fragment}

:::{.medium-small-font .fragment}
1. How many columns do we expect?
2. What does each line do?
3. Can we simplify it?
:::

::::{.fragment .medium-small-font}

```{r eval=F}
starwars |>
  mutate(one = height^2) |>
  mutate(two = height*mass) |>
  mutate(hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
:::

:::
:::

## {dplyr} Basic Functions
<hr>
`mutate()`
<br>
<hr>

[`mutate()` A Challenge!]{.fragment}
<br>
<br>

:::{.fragment .small-font}
```{r eval=T}
starwars |>
  mutate(one = height^2) |>
  mutate(two = height*mass) |>
  mutate(hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
:::

## {dplyr} Basic Functions
<hr>
`mutate()`
<br>
<hr>

`mutate()` A Challenge!<br>
[- *Much cleaner!*]{.fragment .blue-font}
<br>

:::{.fragment .small-font}
```{r eval=T}
starwars |>
  mutate(one = height^2,
        two = height*mass,
        hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
:::

## How do I know the code ran? {.smaller}
<hr>
- There are a several ways to check
  - call the object
  - `print()` the object
  - `str()` the object
  - `glimpse()` the object
  - `View()` the object
- Also look at the variables pane in the secondary sidebar
  - `>` Will expand the object
- No error in the console!
  - i.e., you get a `>` in the console instead of error message

## How do I know the code ran?
<hr>
- There are a several ways to check
  - `print()` the object
  - `str()` the object
  - `glimpse()` the object
- Also look at the variables pane in the secondary sidebar

# {ggplot2} Preview

## {ggplot2} Preview
<hr>
- {ggplot2} or {ggplot} is most popular data viz package in R.
- Part of the {tidyverse}
- We'll learn more in Week 4, but we'll use it a bit today.

# {PalmerPenguins} Scavenger Hunt

## Scavenger Hunt 1 of 2 {.smaller}
<hr>
- In the `week-2` folder you will find an activity called `palmer_penguins_scavenger_hunt.qmd`
- The `.qmd` file has instructions embedded.
- You will be sent into breakout rooms.
- Everyone should have the .qmd file open and be ready to work together.
- Cameras should be on at all times possible.
- ONLY 1 RENDERED (.html) should be submitted.
  - That is, each person in the group should submit the same document. EACH member should submit!
  - Slack is great to share the .html rendered file with the whole group
- Make sure everyone's name is in author field!

## Scavenger Hunt 2 of 2 {.smaller}
<hr>
Breakout room structure:

- **Individual Think Time**: ~ 5 min (camera off / mute)
  - Review document
  - Review prompts
  - Start planning possible approaches/pseudocode
- **Introductions**: ~ 3 min (camera on/ unmute)
- **Collaborative Work** (camera on/unmute)

# Looking Ahead

## Looking Ahead
<hr>
- Week 2 Assignment
  - My First Data Visualization (maybe 2nd)
- Readings
  - **Work Through** Beck (n.d.)
  - **Skim** dplyr cheatsheet
  - **Skim** Wickham et al., (2023)

## Office Hours
<hr>
- Wednesday, 3-4pm
- Same Zoom link as class